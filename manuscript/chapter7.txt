# Michael Hogan: How SAFe Differs from Scrum

Michael Hogan: So, booing and limited of less time here maybe, maybe before lunch and plans. I’m pretty sure I had a dream about this situation before. But the good news is that is catalyst for change and imprompts. We’re going to do that. I want to walk through my impressions of Scrum and SAFe. These are my impressions and in order for that my impressions to be meaningful for you, I want to start off by first walking through a little bit of who I am and what shaped my perspective on these issues. 

So, my foundation is in industrial and systems engineering and I did that at USC, and industrial engineering is the root of where a lot the productivity improvement methodology has come from whether it’s Deming of a team in Toyota. And it focuses on statistics and on different processes and improvement techniques. And what’s nice about industrial engineering is it gives the practitioner a foundation in the statistics and a mathematical bagging behind these methods that we use. And that creates a little bit of freedom, to kind of go outside the lines and stick closer to the manifesto of Agile or the manifesto of Lean rather than having to use the codified frameworks and implementations. Without question, ok? 

And so, then I went into systems engineering for a software  development organization and I was helping to run operations for a team of 100 people, we were inside an organization of 800 people, that was inside of an organization of thousands of people, that’s inside of an organization of hundreds of thousands of people. So doing that I got to see some of the design challenges that come up, some of those communication and scaling challenges and some techniques that help to resolve those. 

I liked helping to resolve those so much, I switched into an internal consultant role and started working with theory of constraints and Lean and scaling that out across a large engineering organization. And I was lucky enough in that process to get to meet Mike Cohn when we were getting trained for Scrum, getting to meet Dean Leffingwell giving training for SAFe and being able to talk about some issues with each framework with those gentlemen and what the impact that had on my thinking in a couple of slides. 

And now I work primarily in a new product incubator, trying to help teams come up with ways to move from idea to getting a product commercialized much faster. So, my starting out point here is “Scrum alone is not a sufficient framework to be successful with development.” Ok? And I like Scrum a lot. I mentioned I went through theory of constraints, and a lot of the literature there is very, it’s narrative driven, it’s story driven to goal books or novels and it’s really hard to turn that into practice. And when I found Mike Cohn’s work it really helped to make theory of constraints actionable through the Scrum model of managing work. But at the same time, you know, when we switch to Scrum and we try to move away from big design upfront requirement documents, one of the things that makes that possible is the testing and some of the quality tools that document our code as artifacts of development process. And if those aren’t in place for an enterprise, especially there’s some risks if you go Scrum only. So, my position is that Scrum alone is not enough. 

So, how do Scrum and SAFe compare? And as Paul said it’s kind of complex. SAFe is a huge topic. Scrum is a huge topic. So, I want to focus on a few meaningful differences. They relate to the challenge of scaling something and getting it adopted by an organization. So, the first thing that we see is architecture. That’s over there. So, in terms of architecture I had a chance to talk to Mike Cohn about it. How does Scrum handle architecture? How does that work? And where is it happened? And a lot of that conversation centered around that concept in a smaller team. There might not be much need of architecture. But when you’re trying to coordinate the work of hundreds or thousands of employees on a given topic, it can become a little bit more important. And what Mike brought up is that from his view, the Scrum approach was not necessarily designed for those types of activities. But, if you had to do it, it would probably be good to do it with an upfront 1 or 2 iterations that focus on architecture and design. Freeze that and them move into the development work managed with Scrum. So, I’ve highlighted that yellow here because it’s a little bit of risk area where maybe Scrum doesn’t handle architecture quite as well as it could. 

In SAFe architecture and design are handled with architectural epics and with architectural runways.  The architectural runway is the concept that in order for the development team to leverage the architecture, it has to be sufficient that they know how to build with it. And they use the example of landing an airplane. If you’re going to land an airplane you have to have the runway in place first. And using a new architecture, the analogy is landing an airplane. The architectural epic is how those architectural runway changes are rolled out into the organization. This is in yellow, too, which is kind of my caution color in the presentation because it doesn’t necessarily address where this happens. 

So, next we have managing development. So, Scrum uses Scrum to manage development. So, that’s pretty straightforward. SAFe also uses Scrum to manage development but they modified Scrum. And they modified Scrum with normalized story points and that probably should be in yellow here. It will be in yellow later and we’ll come back and see why that’s an area of caution.

 When we look at managing the program level, Scrum uses the Scrum of Scrums.  SAFe uses the Agile Release Train and they focus on features and weighted shortest job first. And there’s examples of both techniques working. 

When we talk about managing at the enterprise level, Scrum doesn’t really have that language and SAFe introduces this concept of the epic Kanban. But it’s still a little bit abstract as to how that would actually be implemented by a practitioner. But at least people are starting to talk about it which is useful. 

When we look at code quality, Scrum by the books stops at the acceptance criteria on the user story. And the real challenge with that is that if we are really going to get rid of our design specs upfront and use user stories for the Agile development and we throw the user story away, which is what we do if we are by the book in Scrum, then we lose that documentation of our product unless we have some of the extreme programming quality tools like Automated testing, Auto generating documentation and these sorts of things. So, I like that SAFe brings those in and says “Yeap, we’re going to have acceptance criteria but we’re also going to make sure that we have our XP technical practices.” And you’re not going to be successful as an organization if you don’t bring those in, too. 

Politics and policy is also very important if you try to adopt something in a large organization. And if you’re trying to get it adopted as a framework that you can use to sell to policy organizations like national governments, state governments, city governments SAFe addresses this partially. And I’m rating it here as partial because I think they handle the internal politics right now in the current framework within a corporate organization. They’re still needing to work on getting acceptance in the customer organization and getting the acquisition process, policy and guidance in place and accept it so that companies can use SAFe with confidence that their customer will buy with their developing if they’re working in an RFP context which is common if you’re developing for the government. 

And finally there’s the financial model component. And the financial model is important because this is how the engineering and design department is able to communicate in a meaningful way with the CFO of a finance organization. And, you know, if people have read “The Phoenix Project” which was not my favorite book, but it makes a nice case that you need to be able to interface between finance and design and ops if you’re going to be successful and if you’re going to be able to rely on what your designers are doing around the needs of the company. So, SAFe brings in this concept of cost of delay heavily borrowing from Don Reinertsen’s work. And this is the part that got me excited about what SAFe was trying to add to the conversation about Agile.

 So, I want to explain this briefly to people who may not have seen it. So, what is cost of delay? So, cost of delay is the cost of coming late to market with the new product or service that you try to deliver. And we see cost of delay through three primary signs, I guess. One is theft. So, if you are late to market, your idea can be stolen. And where we see this is any time Apple is coming out with a product and we start finding out about what cases the vendors are designing, and what shape the next iPhone or iPad is going to be before it gets released. That forces Apple to deliver quickly otherwise you can start having copycat devices pop up before you ship. 

Obsolescence is if you’re a Blu-ray manufacturer and you really want to get this great Blu-ray player out but all your customers have moved on because you took too long and now they’re watching their movies on Netflix. 

And lost sales is that delta between, you know, the market audience that you could have had if you’d released on time and the market you end up with when you release late or with a delay. 

And Reinertsen talks about the human flow diagram as a tool for visualizing this and there’s a great blog post with the URL’s down here. It’s by Mike Griffiths called “Creating and Interpreting Cumulative Flow Diagram”. For some reason the Pdf comes up higher in this search result in this blog post. And I’m not going to go into it here right now, but it’s a great reference to look at if you’re looking for a tool you can use. It’s very simple, low data to get it going and will help you to see where the risks are of delays in your process and try to identify where to focus if you want to get rid of those. 

So, we also talked about how SAFe added architecture concepts, code quality concepts, policy extension concepts that go a little beyond what Scrum deals with. So how do those help? First you want to look at does it mean to scale something and again where the context is thousands of employees up to hundreds of thousands of employees. 

Geographic scale. So, multiple continents, multiple cities. Public policy integration. Getting the government to buy or even local policy makers. And it’s not necessarily because the government is buying it, it might be, you know, a situation like Tesla’s facing in the United States, where car dealerships are posed to Tesla selling direct. There’s a policy issue that has to be resolved for them to be able to sell direct. 

Task variety and product variety as the company grows and takes on more initiatives. And supplier integration.  How do you include the suppliers in this process to make sure that your vendors who you’re subcontracting work to are able to participate? All these issue come into play as we’re scaling and some of them might be more significant in hardware or mixed hardware software projects. 

So, as we attempt to scale there are a number of barriers that are common. I don’t think I’ve captured all here but I want to highlight a few and I want to look at how SAFe attempts to address some of these barriers. So, sponsorship is one. Having a sponsor for the initiative is like number 1 on almost every change methodology that I’ve ever encountered and yet so many times we go into that change without having that sponsor and we fail. And then we wonder why didn’t that happen? So, SAFe attempts to highlight that by bringing in the sponsors and making them part of the picture. And that both says you need to have a sponsor and it also makes the sponsor feel included as a stake holder in the change that you’re trying to bring to the organization. 

Confidence. People need to be confident in what you’re trying to do and so we see is case studies coming out because even though as, from a statistics perspective whether someone’s selling Taco Bell burritos or they’re developing software or they’re developing lawnmowers or something, all those design cues kind of look the same. But for those people there’s a lot of uniqueness involved in that and they don’t look the same and they’re going to ask you for a case “Is there anyone else out there in my industry, in my unique situation who’s been successful with what you recommend that I try to do?” And so again, the reason people seek these cases is this issue of uniqueness and one of the interesting things about SAFe is that it’s not necessarily super prominent in the framework but there’s language about having hooks in the framework for tailoring to tailor to the organization. You don’t have to use SAFe exactly as specified. It’s, it exists as a template to help accelerating but even Dean Leffingwell on his seminars for coaches would say “There’s hooks in SAFe where you can tailor to meet the needs of the organization.” And that helps people to adopt the change. 

Language. The communality of a language is really important when we try to scale across dozens or hundreds of teams. And having something like the big picture to communicate that can help because people need to know what each other are talking about for something to grow. 

Education. Having experienced both certification programs as a coach, I think SAFe certification framework is more favorable to coaches. And that might be why it’s kind of picking up some steam. And there are some risks with that because maybe the barriers to getting certified that can be a little bit lower in some cases. But it’s important that certification program exists, the learning path is clear and it’s kind of integrated and that’s nice. 

Policy. So, when I got trained for SAFe, the Software Engineering Institute was at the same training. They had a representative there. The person was there because they were interested in ”Can they recommend to the government accounting office or the US DoD type organization or the US, you know, the food and drug or the Heath Organization to adopt Scaled Agile Framework as an acquisition policy approach?” And the SAFe leadership and thought leaders are really putting in a lot of effort to make those discussions happen and try to get that acquisition approach to come into being and that’s important in terms of allowing large organizations to invest in rolling out a change effort. So, that’s very important.

We talked about quality and XP tools and then tooling. So, tooling for me here is a risk area. We see the terms of SAFe being introduced into rally and into version 1, things at the portfolio level, things at the program level. And the challenge here is if everyone on the team doesn’t have access to the tool, in my experience and in what I have observed, typically the team really isn’t using the methodology because somebody else is statusing for them and putting data into this tool. So, I see this as a weakness right now. 

So, a few aspects to be cautious about. The normalized story points bothers me. I think there is a lot of value in having that understanding of the team as a unique entity working together and what their independent velocity is. And I think that if you take the time to understand velocity and how it works, the issues that a story-points normalization seeks to address kind of drop away and not be as big of a barrier as they might seem. Weighted shortest job first I really liked as a concept. I’m not sure we know yet how to do that because it requires understanding the value of the epic, or the value of the feature. And often time for organizations coming from earned value management, value equates to what it costs to develop and that’s not going to get you the right way to the shortest job first. So, there is some work that needs to be done in terms of “How do you do this?”   

We talked about tools. I’m concerned about premature adoption as an acquisition framework. SAFe may or may not reach that stage. But, you know, if it did, as it is today, I don’t think it gives us the jump we’re looking for over the legacy acquisition framework which is the Waterfall method and kind of a milestone designer for these because the current implementation doesn’t solve those issues that make projects fail in that context. I think they’re moving towards it, though in future iterations. 

And, then lastly, not as important as the others maybe, it bothers me that there is this emphasis always on face to face. We live in 2014. We have amazing collaboration tools available to us.  And if you follow 37Signals now Basecamp and read the book “Rework”, they talk about how they built a team with people all over the world. It allowed them to get the best people. And that skills differential of the people they brought into the organization outweighs maybe some of the communication difficulties thst they face and they’re also able organize the work in an intentional way that leverages where people live and the times of day that overlap and don’t overlap. So, I’m not a big fan of the insistence of face to face. 

So, my conclusion on SAFe is that it’s very useful today as a framework for enterprises to get started with the transition to Agile but further iterations may continue to make it better. And I want to briefly explain what that might look like, one possibility. So, where we look for the end state? Where might SAFe be going? Where might other framework be going? And a lot of this comes from Toyota as project development. Definitely it shapes SAFe. It seems like it also shapes Agile thinking. And so, if we accept that we want to achieve the outcomes of flow, of value, we want the elimination of wasted resources and activities, we want respect for people in our team, then it’s interesting to look at “Have we made an assumption here that Toyota does design the same way that they handle production?” So, we need to look at “How does Toyota get there?”, “How does Toyota do design?”

So, what we see, is Toyota doesn’t use point-based design. MIT has kind of looked into this and there’s only a couple of papers. It’s hard to find this stuff. It’s kind of Toyota open-sourced their production process because that helps them interface with suppliers. But they didn’t open-source their design process as competitive advantage and MIT’s done a little bit of looking into it but still there’s not a lot of literature out there. And what happens is in this point-based design situation if you miss your milestone because you focus on one type of engine for your car, let’s say a hybrid engine, and you’re developing the engine whether it’s Agile or Waterfall or whatever approach, and you arrive at the production readiness decision “Are we going online with manufacturing this thing?” and that engine doesn’t work and there’s no backup plan because it’s point-based design, what ends up happening is your schedule slips because you have to redo the design effort “Hey, let’s go back to the internal combustion engine. Let’s start from scratch.” So, what MIT has found that Toyota does is a set-based design. They keep, and I fabricate the engine example because it’s convenient to talk about, but what Toyota does is they keep multiple technology alternatives in play throughout the development of a new vehicle. So, if they want the electric engine, they’ll have a hybrid engine as maybe a middle step and they’ve got the internal combustion engine that they know how to build and they can fall back on and they mature all three in parallel. And what that does, is it gives a set of potential technologies. Those technologies are modular. They can be switched out for one another and that means when they get to that decision point that says “We need to pick an engine today and start the factory or we’re going to miss our target shipment day and we’re going to have loss sales.” they are able to move forward with the technology that is closest to what they want but it works today. So, maybe they don’t get to the electric engine, but they’ve got the hybrid working. They can leave the gasoline engine behind and introduce the hybrid vehicle. 

So, my challenge to everyone as an Agile community is as a group how do we challenge the assumption that design is the same as production? And if we acknowledge some of the uniqueness around design, how we then incorporate set-based design, the Lean design that we observed at Toyota? How do we incorporate that? So, it’s a feature for the Lean production methods that we already know how to do and in software that applies to devops or maybe maintenance, maybe some other tasks. How do we also bring in the Lean set-based design whether that’s in SAFe or any other framework that will let us, that will boost us ahead, that will get us to the next level of effective development. 

So, thank you. 

