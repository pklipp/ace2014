# Michael Hogan: Comparing SAFe and Scrum

Scrum and SAFe are both methods that have been developed by Agile practitioners to help teams increase Agility. In this article, I will compare and contrast Scrum and SAFe based on my impressions of and experience with each. In order for my impressions to be meaningful to you, I want to start off by first walking through a little bit of who I am and what professional experiences have shaped my perspectives on Scrum and SAFe. After a brief introduction, I'll move on to compare Scrum and SAFe using the lens of what it takes to scale any initiative within a large enterprise. My hope is that, whether you choose to adopt Scrum, SAFe, or neither, you'll leave today with some useful information about how to scale an initiative in a large organization. Finally, I'd like to leave you with my thoughts about the utility of applying Lean Thinking to creative work and share my view of where we need to head next as an Agile community.

## The Origins of My Perspectives on Agile

My foundation is in industrial and systems engineering, which I studied at the University of Southern California. Industrial engineering is the source of many productivity improvement methodologies, whether Lean from the Toyota Production System, or Six Sigma from Motorola, or now Agile. IE focuses on statistics and on different operations research and process improvement techniques. And what’s nice about an education in industrial engineering is it provides an understanding of the statistics and mathematics behind these methods that we use as Lean and Agile practitioners. And that understanding helps a practitioner to approach any codified Lean or Agile frameworks with a critical eye and helps mix and match methods in order to stick closer to the intent of the Agile Manifesto rather than follow one methodology without question.

Transitioning out of college, I went into systems engineering for a software  development organization and I was helping to run operations for a team of 100 people. We were inside an organization of 800 people, that was inside of an organization of thousands of people, that’s inside of an organization of hundreds of thousands of people. So doing that I got to see some of the design challenges that come up, some communication and scaling challenges, and some techniques that help to resolve those. 

I liked helping to resolve organizational and scaling challenges so much that I switched into an internal consultant role and started working with Theory of Constraints and Lean, and I helped to scale those methods out across a large engineering organization. During that process, I was lucky enough to get to meet Mike Cohn and Dean Leffingwell and was able to talk with those gentlemen about some issues with each framework. Those conversations have shaped my thinking about Scrum and SAFe and I'll share some of those thoughts with you in this article.

## Scrum Alone Doesn't Provide Agility

Scrum alone is not a sufficient framework to be successful with development.

Please don't misinterpret the statement above, I like Scrum a lot. I mentioned I worked with Theory of Constraints, and a lot of the literature there is very narrative driven. The Goal and other ToC books are presented as novels and it’s really hard to turn those stories into practice. When I found Mike Cohn’s books on Scrum it really helped to make Theory of Constraints actionable through the Scrum model of managing work. But at the same time, when we switch to Scrum and we try to move away from big design upfront requirement documents, one of the things that makes that possible is the testing and some of the quality tools that document our code as artifacts of development process. And if those aren’t in place for a team--especially within an enterprise--there’s some risks if you go Scrum only. So, my position is that Scrum alone is not enough.

## How do Scrum and SAFe compare?

As Paul hinted when introducing me, SAFe is a huge topic. Scrum is also a huge topic. So, I want to focus my comparison of these frameworks on a few meaningful differences that relate to the challenge of scaling something and getting it adopted by an organization. Let's look at these challenges one by one.

### Architecture

When big enterprises with big architecture or systems engineering departments consider adopting Agile one of the first questions that often gets asked is "what will happen to all of our architects and systems engineers?" This is an important question. If people are going to adopt a new model of doing something, they need understand how they fit into that model. It is a lot easier to accept a transition plan that includes your job, and it's much more difficult to adopt a model of work that excludes your job.

I had a chance to talk to Mike Cohn about it. How does Scrum handle architecture? How does that work? And where is it happened? And a lot of that conversation centered around that concept in a smaller team. There might not be much need of architecture. But when you’re trying to coordinate the work of hundreds or thousands of employees on a given topic, it can become a little bit more important. And what Mike brought up is that from his view, the Scrum approach was not necessarily designed for those types of activities. But, if you had to do it, it would probably be good to do it with an upfront 1 or 2 iterations that focus on architecture and design. Freeze that and them move into the development work managed with Scrum. So, I’ve highlighted that yellow here because it’s a little bit of risk area where maybe Scrum doesn’t handle architecture quite as well as it could. 

In SAFe architecture and design are handled with architectural epics and with architectural runways.  The architectural runway is the concept that in order for the development team to leverage the architecture, it has to be sufficient that they know how to build with it. And they use the example of landing an airplane. If you’re going to land an airplane you have to have the runway in place first. And using a new architecture, the analogy is landing an airplane. The architectural epic is how those architectural runway changes are rolled out into the organization. This is in yellow, too, which is kind of my caution color in the presentation because it doesn’t necessarily address where this happens. 

### Managing Development

So, next we have managing development. So, Scrum uses Scrum to manage development. So, that’s pretty straightforward. SAFe also uses Scrum to manage development but they modified Scrum. And they modified Scrum with normalized story points and that probably should be in yellow here. It will be in yellow later and we’ll come back and see why that’s an area of caution.

 When we look at managing the program level, Scrum uses the Scrum of Scrums.  SAFe uses the Agile Release Train and they focus on features and weighted shortest job first. And there’s examples of both techniques working. 

When we talk about managing at the enterprise level, Scrum doesn’t really have that language and SAFe introduces this concept of the epic Kanban. But it’s still a little bit abstract as to how that would actually be implemented by a practitioner. But at least people are starting to talk about it which is useful. 

### Managing Quality

When we look at code quality, Scrum by the books stops at the acceptance criteria on the user story. And the real challenge with that is that if we are really going to get rid of our design specs upfront and use user stories for the Agile development and we throw the user story away, which is what we do if we are by the book in Scrum, then we lose that documentation of our product unless we have some of the extreme programming quality tools like Automated testing, Auto generating documentation and these sorts of things. So, I like that SAFe brings those in and says “Yeap, we’re going to have acceptance criteria but we’re also going to make sure that we have our XP technical practices.” And you’re not going to be successful as an organization if you don’t bring those in, too. 

### Politics and Policy

Politics and policy is also very important if you try to adopt something in a large organization. And if you’re trying to get it adopted as a framework that you can use to sell to policy organizations like national governments, state governments, city governments SAFe addresses this partially. And I’m rating it here as partial because I think they handle the internal politics right now in the current framework within a corporate organization. They’re still needing to work on getting acceptance in the customer organization and getting the acquisition process, policy and guidance in place and accept it so that companies can use SAFe with confidence that their customer will buy with their developing if they’re working in an RFP context which is common if you’re developing for the government. 

### Financial Language

And finally there’s the financial model component. And the financial model is important because this is how the engineering and design department is able to communicate in a meaningful way with the CFO of a finance organization. And, you know, if people have read “The Phoenix Project” which was not my favorite book, but it makes a nice case that you need to be able to interface between finance and design and ops if you’re going to be successful and if you’re going to be able to rely on what your designers are doing around the needs of the company. So, SAFe brings in this concept of cost of delay heavily borrowing from Don Reinertsen’s work. And this is the part that got me excited about what SAFe was trying to add to the conversation about Agile.

#### Cost of Delay Thinking

In order to understand how SAFe approaches Agile from an economic perspective, it is important to explain "cost of delay thinking." The cost of delay is the cost of coming late to market with a new product or service. We see cost of delay in three primary forms: theft, obsolescence, and lost sales. Let's look at each of these.

If you are late to market, your idea can be stolen. We see the risk of theft when Apple is coming out with a product and we start finding out about what cases the vendors are designing, and what shape the next iPhone or iPad is going to be before it gets released. That forces Apple to deliver quickly, before copycat devices are able to ship. 

Obsolescence is if you’re a Blu-ray manufacturer and you really want to launch a great Blu-ray player, but all your customers have moved on because you took too long in development and now your customers are watching their movies on Netflix.

Finally, lost sales is that delta between the number of products that you could have had if you’d launched on time and the market share you end up with when you release late or with a delay.

Don Reinertsen, in Managing the Design Factory, [ISBN-13: 978-0684839912](http://www.amazon.com/Managing-Design-Factory-Donald-Reinertsen/dp/0684839911), introduces the Cumulative Flow Diagram as a tool for visualizing cost of delay. Mike Griffiths has written a fantastic article called “Creating and Interpreting Cumulative Flow Diagram” that explains how to construct these diagrams. They're a very simple, low data tool that will help you to see where the risks are of delays in your development process so that you better understand where to focus process improvement resources. 

## What does it mean to scale

Above, I introduced how SAFe added architecture concepts, code quality concepts, and policy extension concepts that go a little beyond what Scrum deals with. To understand how those extensions help, let's look at what it means to scale something. Again, remember that the context of the scaling challenge is an organization with hundreds, thousands, or even a couple hundred thousand employees.

Scale can challenge large organizations in a number of ways. Geographic scale can introduce the need to collaborate across multiple cities, continents, and time zones. Public policy integration can become a challenge when the government is a customer or in a situation like Tesla is facing in the United States where car dealerships are lobbying against Tesla's ability to sell direct to consumers. Task variety and product variety can become drive complexity as a company grows and takes on more initiatives. Similarly, it may be a challenge to include suppliers in a change initiative or product launch.

Each of these issues, and many others, come into play as we’re scaling an Agile transformation initiative and some of them might be more significant in hardware or mixed hardware software projects or highly regulated industries. These issues lead to barriers that can hinder an Agile transformation. SAFe attempts to address some of these barriers in ways that Scrum does not.

### Sponsorship

So, sponsorship is one. Having a sponsor for the initiative is like number 1 on almost every change methodology that I’ve ever encountered and yet so many times we go into that change without having that sponsor and we fail. And then we wonder why didn’t that happen? So, SAFe attempts to highlight that by bringing in the sponsors and making them part of the picture. And that both says you need to have a sponsor and it also makes the sponsor feel included as a stake holder in the change that you’re trying to bring to the organization. 

### Trust & Confidence

Confidence. People need to be confident in what you’re trying to do and so we see is case studies coming out because even though as, from a statistics perspective whether someone’s selling Taco Bell burritos or they’re developing software or they’re developing lawnmowers or something, all those design cues kind of look the same. But for those people there’s a lot of uniqueness involved in that and they don’t look the same and they’re going to ask you for a case “Is there anyone else out there in my industry, in my unique situation who’s been successful with what you recommend that I try to do?” And so again, the reason people seek these cases is this issue of uniqueness and one of the interesting things about SAFe is that it’s not necessarily super prominent in the framework but there’s language about having hooks in the framework for tailoring to tailor to the organization. You don’t have to use SAFe exactly as specified. It’s, it exists as a template to help accelerating but even Dean Leffingwell on his seminars for coaches would say “There’s hooks in SAFe where you can tailor to meet the needs of the organization.” And that helps people to adopt the change. 

### Language

Language. The commonality of a language is really important when we try to scale across dozens or hundreds of teams. And having something like the big picture to communicate that can help because people need to know what each other are talking about for something to grow. 

### Training Curriculum

Education. Having experienced both certification programs as a coach, I think SAFe certification framework is more favorable to coaches. And that might be why it’s kind of picking up some steam. And there are some risks with that because maybe the barriers to getting certified that can be a little bit lower in some cases. But it’s important that certification program exists, the learning path is clear and it’s kind of integrated and that’s nice. 

### Policy Integration

Policy. So, when I got trained for SAFe, the Software Engineering Institute was at the same training. They had a representative there. The person was there because they were interested in ”Can they recommend to the government accounting office or the US DoD type organization or the US, you know, the food and drug or the Heath Organization to adopt Scaled Agile Framework as an acquisition policy approach?” And the SAFe leadership and thought leaders are really putting in a lot of effort to make those discussions happen and try to get that acquisition approach to come into being and that’s important in terms of allowing large organizations to invest in rolling out a change effort. So, that’s very important.

### Tools

We talked about quality and XP tools and then tooling. So, tooling for me here is a risk area. We see the terms of SAFe being introduced into rally and into version 1, things at the portfolio level, things at the program level. And the challenge here is if everyone on the team doesn’t have access to the tool, in my experience and in what I have observed, typically the team really isn’t using the methodology because somebody else is statusing for them and putting data into this tool. So, I see this as a weakness right now.

## SAFe: Some Areas of Caution

There are a few aspects of SAFe that I am cautious about and it is important to highlight those. The normalized story points bother me. I think there is a lot of value in recognizing a team of unique people, working together, as a unique entity, and what their independent velocity is. And I think that if you take the time to understand velocity and how it works, the issues that story-point normalization seeks to address kind of drop away and aren't as big of a barrier as they might initially seem.

SAFe prioritizes features and user stories using a Weighted-Shortest-Job-First heuristic. While I really like WSJF as a concept, I’m not sure we know yet how to use it in most organizations because I'm not sure organizations understand how to measure the value of an epic, feature, or user story. Often (and especially for organizations coming from earned value management), value is assumed to equates to what a unit of work costs to perform and that’s not going to get you the right weighting under weighted-shortest-job-first. So, there is some work that needs to be done in terms of “How do you do WSJF?”   

We see the terms of SAFe being introduced into Agile project management tools. And the challenge here is that tools these are expensive and licensed by the user, so expensive that often teams cannot afford licenses for all team members. What I've observed, is that if even one team member lacks access to the tool then, typically, somebody else is statusing for that team member and putting  his or her data into the tool. When that happens, the team really isn’t using the methodology. So, I see this as a weakness right now.

I’m concerned about premature adoption of SAFe as an acquisition framework. SAFe may or may not reach that stage. But, you know, if it did, as it is today, I don’t think it gives us the jump we’re looking for over the legacy acquisition framework which is the Waterfall method. I don't think the current implementation of SAFe  solves the issues that make projects fail in the Waterfall context. I do think SAFe is evolving to address those issues, and I expect to see solutions in future iterations of the framework.

Lastly, not as important as the others maybe, it bothers me that there is this emphasis, always, on face-to-face. We live in 2014. We have amazing collaboration tools available to us. And if you follow 37Signals (now Basecamp) and read their book “Rework”, they talk about how they built a team with people all over the world. It allowed them to get the best people. And that skills differential of the people they brought into the organization outweighs the communication difficulties that they face. They're also able organize the work in an intentional way that leverages where people live and the times of day that overlap and don’t overlap. So, I’m not a big fan of the insistence on face-to-face.

## Concluding Thoughts on SAFe

So, my conclusion about SAFe is that it’s very useful today as a framework for enterprises to get started with the transition to Agile but further iterations may continue to make it better.

## What's Next for Agile?

I want to briefly explain what future iterations of Agile might look like; at least one possibility. So, where we look for the end state? Where might SAFe be going? Where might other framework be going? And a lot of this comes from Toyota as project development. Definitely it shapes SAFe. It seems like it also shapes Agile thinking. And so, if we accept that we want to achieve the outcomes of flow, of value, we want the elimination of wasted resources and activities, we want respect for people in our team, then it’s interesting to look at “Have we made an assumption here that Toyota does design the same way that they handle production?” So, we need to look at “How does Toyota get there?”, “How does Toyota do design?”

So, what we see, is Toyota doesn’t use point-based design. MIT has kind of looked into this and there’s only a couple of papers. It’s hard to find this stuff. It’s kind of Toyota open-sourced their production process because that helps them interface with suppliers. But they didn’t open-source their design process as competitive advantage and MIT’s done a little bit of looking into it but still there’s not a lot of literature out there. And what happens is in this point-based design situation if you miss your milestone because you focus on one type of engine for your car, let’s say a hybrid engine, and you’re developing the engine whether it’s Agile or Waterfall or whatever approach, and you arrive at the production readiness decision “Are we going online with manufacturing this thing?” and that engine doesn’t work and there’s no backup plan because it’s point-based design, what ends up happening is your schedule slips because you have to redo the design effort. “Hey, let’s go back to the internal combustion engine. Let’s start from scratch.”

What MIT has found is that Toyota handles design differently from production. Toyota applies what MIT calls set-based design. They keep multiple technology alternatives in play throughout the development of a new vehicle. So, if Toyota wants to launch an electric engine (disclaimer: I fabricate the engine example I'm using here because it’s convenient to talk about), they’ll have a hybrid engine as maybe a middle step and they’ve got the internal combustion engine that they know how to build and that they can fall back on, and they mature all three in parallel. And what that does, is it gives a set of potential technologies. Those technologies are modular. They can be switched out for one another and that means when they get to that decision point that says “We need to pick an engine today and start the factory or we’re going to miss our target shipment day and we’re going to have loss sales.” they are able to move forward with the technology that is closest to what they want but it works today. So, maybe they don’t get to the electric engine, but they’ve got the hybrid working. They can leave the gasoline engine behind and introduce the hybrid vehicle. 

I'd like to conclude by issuing a challenge to the Agile community. As a group how do we challenge the assumption that design is the same as production? And, if we acknowledge some of the uniqueness around design, how do we then incorporate set-based design (guided by MIT's observations at Toyota)? How do we incorporate set-based-design so that it acts as a feeder for the Lean production methods that we already know how to apply to DevOps, maintenance, and production tasks? Whether the answer to these questions is provided by SAFe, or by any other framework, getting the answer is the catalyst that will boost us ahead, that will get us to the next level of effective new product development.