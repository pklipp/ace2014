# Russ Miles: Pair Programming Considered Bad For Your 'Mental' Health

![Sketchnote](images/originals/russ.jpg)


All right! Good morning, good morning. Has everyone had enough coffee to start things off this early? This was early to me anyway. About a week ago I was in San Francisco and I think mentally I’m still in that time zone so I don’t know where that actually leaves me right now. But hopefully it leaves me awake enough to keep you up beat and I’ basically the warm up act for Liz who is not here yet. She’s busy doing her slides but I’m going to get you pumping and ready for Liz’s act this morning which is pretty cool.

Ok, so, who writes code in the room? Who writes code every day roughly? Ok, there’s some people in the room. Ok. Fine. Just want to get balanced so I know who am I speaking to, at what level and I don’t want to go too deep and crazy into angled brackets and anything silly.  

Ok. This talk is new one and it’s something I care massively about compared to everything else I do which is obviously in comparison, I compare with nothing about. This one is a big one for me in that, to carry on what Paul was saying. I think he’s absolutely right. People are going to be wear it, up going forward but it’s going to be that strange marriage between people, technology processes and practices that we’ve been at notoriously bad at getting right in this industry. And what I’m going to talk about is actually a real tour of what I see as the major ailments of software development. I hope I don’t make it too negative a start of the day. But maybe a froze down the gauntlet for everybody to start thinking about these things and maybe we can actually get better at them, and heal this strange patient that is software development. 

Ok. Very first of all, I’d like just like to people more in the room will have no idea who this man is but everyone who’ll stand on the stage like this will have a rough idea who he might be and this is a comedian from the UK. Unfortunately he passed away last week. He’s actually a genius. I’m pretty sure it translates well into Polish, so if you haven’t seen anything he’s done, go and have a look. Absolutely awesome. And frankly he’s one of the reasons I got in stage at all. Being an introvert myself, this is frightening and people like this help me get out there and actually do these things. I just wanted to put it out there and he unfortunately he passed away last week. Rick Mayall was an absolute genius. 

So, who am I? I’m in a very privileged position to have been able to engineer my own job role. I used to be a CEO of several companies. I have this unfortunate habit of starting companies and then selling them. It’s substantially painful. But, I found out that I as a CEO it’s kind of a badge you get and you become this person that has to stand there and like spreadsheets and I can’t do that. I can’t, for love of the money, think a spreadsheet is interesting even when it tells me we’re in profit. 

So, my real job is pretty much either this or Iron Man. I’m working towards either end, I’m not sure where I’ m going yet. Basically I’m a chief scientist which means I can be as insane as I like. It means I can enjoy our industry for what it is. It means I can do talks like this where I can talk very brutally about what we do. I don’t really have much of an agenda other than to point out what’s wrong or what’s right. 

So, this is the inhumanity of software development. Just to point out, there aren’t many slides in this, particular slides, right? There’s almost no slides. I am a big fan of not using slides. I think it’s really nice to rather talk to you. I can put slides online just, you know, to cover it but it would be much nicer to have chats with you. And now that I’ve seen there are booo’s all the way along the side here, this is just the precursor. After this is done come and find me. I warn you, I’m an introvert, I will hide. But when I do hide, hunt me down. Ok? Have conversations with me. I’m assuming at some point it becomes ok to have beer in this micro brewery. At that point is a great time to catch me. Ok. So, there will be absolutely no slides on this one and what we are going to do instead is first of all talk about the inhumanity  of process. 

So, we’ve spent, 14 years now, doing all sorts of efforts in how we manage our work and bring it to the table with the, I guess the target to actually adapting as we go. Ok? It’s a big deal for me and what we do, I think Agile is a pretty awful term in many respects because first it has a lot of baggage. If you look at the root of the word it doesn’t entirely describe very well what are trying to do. It has too many other options. I’m a big fan of adaptable. What I want to do is create software and systems that can adapt to the needs of human beings all the time. If you can adapt then I’m doing things right. So, I very much prefer the term adaption or adapting to Agile. But that aside, I think it’s fair to say that are certainly some people in this room and genuinely in the industry that have a pretty good job with process. There’s a lot of thought that’s gone into it. I don’t’ subscribe to the negative view that we’ve just adopted from other industries, just a little bit of it. But I don’t think that’s all we do. I think we’ve innovated, we’ve worked hard. Process actually isn’t that inhumane in my opinion. There are worse culprits and criminals out there. So let’s have a look at some of those. 

So, the inhumanity of practices. Ok. I’m going to start with the eponymous culprit which is pair programming. Ok. How could there possibly be anything wrong with pair programming?  It has so many beautiful effects to it, right? We end up having quick feedback loops and everyone feels a lot better about the software we were building and you get to work with somebody all the time and that’s human interaction and that’s really good and important. I am going to draw you back to something I mentioned a couple of times so far. I am most certainly an introvert. That might seem odd to someone standing in front of 200 people. And it is. But I am most certainly an introvert. Once I finish on this stage I will flee to a corner to recharge. And when I say “hunt me down”, that’s almost masochistic. As an introvert you can’t sustain long conversations with lots of people. There’s an easy test for introversion but I don’t want to get too much into character traits and what is and what isn’t. But if you take for an example. If you could understand the question. When you go to a party, when you walk into a party do you sort of, even subconsciously, look to gravitate to have a one on one conversations with people rather than having big thumping conversations in the corner? Who does that? Who goes to have a little conversation on the side? Ok. So, there’s a few hands going up. Ok. Great. So, it’s about 50% that we will end up with, normally. 50% is usually about right for introverts. Unfortunately we have a world, certainly a culture in the west of embracing extroversion as the norm and we treat introverts or introversion almost as something that should be just overcome. And I think that does us a disservice. 

So, coming back to pair programming, if you want to torture an introvert, make them have conversations all day long. Make them sit and feel very vulnerable. Deplete their energy whilst they’re constantly interacting with other people. Worse than that, stick them in an intellectual pursuit like software development where they want to be creative and completely inhibit that creativity by making sure that all the energy is put into conversation and relationships with other people. This is where I talk about the cult of extroversion. I think is unfortunate that we don’t realize that people are extremely unique and introversion, extroversion is one huge continuum. And even that, it can be broken down to many different facets. But if we just take that one, I think it’s very unfair to say that you need to be more extrovert, you need to be engaging with people all the time. There are great examples in the world where introverts have done incredibly amazing things by being their introverted selves. Ok. We brought into it, we brought into this idea that we have to collectively brainstorm and group think and we all must work together and throw our ideas all together. But in fact, an awful lot of progress and great things have come from the lone thinker. And like most things in this industry, it’s not as simple as we all do it together. It’s going to be a lot of variation. 

So, back to pair programming which is only one of the things I point out. Pair programming for me, I don’t have a problem with pair programming. I do pair programming, but as an introvert, as someone who recognizes the fact they are introverted, I really can’t do it all day. It will kill me. I will go home a quivering mess. It’s not pretty. I pretty drown my sorrows. I blame the fact that I would like to have a beer later on introversion and pair programming, beyond fair, maybe. Ok. So, what’s the problem here? It’s the mandatory pair programming. I don’t know how many organizations are like that here in Poland but certainly in London there’s a few organizations that have started to dictate, in a generic sense or general sense, thou shall pair program or thou shall not touch the code. I think that’s a little bit dangerous not Lis because I’m not sure Lis the greatest code in the world. But also to be honest, if you’re an introvert, that’s pain, that’s basically, well, it’s discrimination. It’s going to stop me wanting to contribute as much as I would like to. 

So, first thing be careful with pair programming.  The other one, actually the other two, two particular problems I’d like to highlight. Ok. This is mainly for people who work in software development teams daily and you may or may not have seen these effects. They seem to happen where people get very obsessed with their craft. I call it the ”Coacher of keyboard clacking”. Ok? So, if you go “ What’s the sound of software development happening? It is –typing sound- or is it silence? Or is it conversation? Now, my experience is a combination of all three but I would say the least productive is the first one (typing sound). This has probably to be the biggest keyboard you’ve ever seen. But, yes, typing away. That’s not where software happens. And if you are in a position of management don’t assume that because people are using keyboards at the speed of light that they are thinking. They probably hunt. Or if they are, that’s brilliant, but it’s pretty amazing. I have actually been for interviews where the basic rule is “How fast are you with the IDE?” I’m not. I’m terribly slow. I can’t even touch type. But I don’t care because software development doesn’t happen there. Software development, for me, happens somewhere else. And unfortunately for every organization I’ve ever worked with software development, for me, happens in the shower. So, it’s not an easy explanation that one. I just like to go take a quick shower to have a think. Never an easy explanation to most management types which is why I work for myself. But, yeah, software development happens when you go out for a walk. It’s when you’re thinking, it’s all about thinking. 

Design is another phrase for thinking about it. And thinking about it doesn’t limit itself to one place. It certainly doesn’t limit itself to the keyboard. So, the culture of keyboard clacking. If you are in a position of management, please,I would employ to please stop worrying about “are they hitting the keyboard quickly enough?” By the way, combine that with pair programming. I don’t know if you’ve had this experience. You sit down to pair programming and someone is such a genius at keyboard clacking that they’re moving to the next phase with is keyboard ballet. It is literally a thing of beauty but you have no idea what they’ve done. You’ll see there’s the navigator pilot scenario and you’re supposed to be commencing on what they’ve just done but all you’ve seen is – typing very fast-. Done. I have absolutely no idea what files you’ve just changed. I have no idea what you’ve typed. And now it doesn’t compile. So, keyboard ballet. Let’s no optimize for that either, please. I would much rather we optimized for thinking in this industry. It would do us a lot better. 

Ok, the last two I’d like to leave you with, is when it comes back to introverts on practices anyway, is to think carefully about teams. Teams in this industry have become something of a cult and there’s good reasons for it. Theirs is plenty of evidence to suggest that working in teams is extremely productive and that we can come up with often better than the sum of the parts solutions. But remember, you’ve got roughly 50% of introverts in the room. And there’s plenty of evidence to suggest there that introverts are more creative when allowed to work on something alone. So, let them walk away and have a think. And this is something that we don’t do very often, it’s almost become frowned upon in many organizations I worked with is he’s not a team player or she’s not a team player, she is going to think about.. They keep coming back with great ideas but don’t they include us in that gestation period? If they’re introverts, they can’t. Speaking of this one, I can’t do that. I come up with my best ideas when no one is talking to me. And if I try and brainstorm these ideas using a mind map or something on the wall I don’t come up with great ideas, I just come up with verbage. Bleah! And that’s not what you’re looking for usually. 

So, again I’m coming back to that introversion quality that many of us have. Just let people be individual if they need to be. The culture of teams can be taken away too far in this regard, in my experience. 

Ok. So the other sorts of things I can bring out, I think. Retrospectives. Do you have any idea what a retrospective does to an introvert? Think of a rack where they’re being positioned in a situation where they have got to open up completely and tell you what they liked and disliked. And worse they can’t even think about it because they don’t think when everyone’s here. It’s like an enforced party situation where you can’t pair up and go and have a conversation with somebody. It’s very difficult. So, we have techniques for retrospectives where we try to help people go off and think and have their moments alone. Those are really, really important if you want to get the most out of 50% of people there. Please do, I’ve been in retrospectives where I’ve watched. As an introvert you almost get a radar for these things. You can watch the introverts flinch when things are going in a big group huddle way. It feels very uncomfortable. By the way, it’s a bit odd that I’m speaking to 200 people and I’m an introvert. Actually it’s really simple. As far as I’m concerned, I’m talking to one person, whoever I’m looking at that moment. Ok? This is the technique of an introvert in public speaking. I’m only talking to who I’m looking at right now. Hi! And that works for me. I cannot possibly talk to 200 people but I can talk to one person by looking at them.  

Ok. Some other things to talk about in the practices area. I’ll move on quickly in a sec so I want to go to the next section. One thing to look at very quickly is this idea of craftsmanship and mastery. I’d like to put out that there’s a little bit of a concern I have in calling anyone a master of anything. That implies that they’re almost done or that they are always right. Speaking about someone who’s got a lot of influence in some parts of the industry being open source developer and all that sort of thing. I’m very weary of my influence and power in those regards. And so, I can, I am very careful about what I say because if you are the master you get labeled as the truth. And the problem I’ve got with that is there are always better ideas out there, somewhere and they’re not coming just from mastery. I have a bit of an issue with the craftsmanship and mastery side of things, too. I’d much prefer the Zen approach. This is an Agile conference, after all. I can talk about Zen, right? And no one is going to hit me. Ok. If you are for the Zen approach, the master doesn’t know what the answer is, he’s going to help you discover the answer for yourself. I actually kind of like that mode of operation. Even when I do software development consultancy or writing I work with people to figure out how they get to the answer rather than trying to give them my answer because they’d never get the right lesson from that. Ok. So, that’s enough on practices. 

Now, let’s look at architecture and design. Still with me? Ok. Architecture and design in software. How can I possibly make this interesting? I’m not sure I can, but I’ll try. Ok. So first of all, let’s start with what architecture is. And that’s something that has perplexed people in this industry for years and years and years. And we’ve come up with terms like “it’s the big decisions”, big being one of those wonderfully objective terms that we all agree on, right? What’s big and what’s small. A big decision or not it’s the language you use. A big decision is the framework you use, a big decision? A big decision is that line of code you’re in, a big decision. Well, in truth they can all look big depending on how much impact they have. I think that, so we can actually rebadge architecture for what it really is, which is philosophy. When you are approaching the architecture of a solution you bring all of your ideas, all of your baggage, all of your experiences to that problem. Whether you are architecting a process change or you’re architecting some software, you’ll bring in your thought processes to the problem. So the interesting thing about this is that all those processes are build upon some axioms at the bottom. You just think it’s self evident. And sometimes we haven’t really thought about those. So, the interesting thing in software architecture at the moment is, I think, we’re still stuck in the Waterfall mode of thinking. We still believe with the right amount of time, the right amount of consideration and the right genius moment, we will come up with the perfect, perfect, ideal architecture. And every time that doesn’t happen we assume we did something wrong. I think that’s flawed. I think it’s inhumane and it’s not doing ourselves any justice.  

The reason for it is, and this is going to get a bit wacky, I blame Plato.  If you’re going to blame someone, blame someone from 2000 years ago. It’s a good idea, right? Because they are a long way and they really cannot argue with you. If someone appears here they can argue with me and I’m sure they will hate it. Plato, lets’ blame Plato. Bad Plato. So, Plato is an issue because he got us sold on this idea that thing could be perfect. There was the perfect form, this whole process of excellence to get there. And it was so worth it and it was the ultimate good. And in fact to be fait I think Aristotle had the same issues and most of them actually at that particular academy, school of thinking. They really, really believed there was a perfection out there. No one more than Plato. To be fair with Plato, at the end of his life he did have one of those moments that you dread as someone who’s come up with a school of thinking and going “Ah, I’m not sure I’m right.” And the problem was I don’t think he was right, but, unfortunately he has completely permeated Western thinking right into our current software development. Now, we’ve just spent 14 years killing Plato in our processes. We’ve been realizing that perfection doesn’t exist. We’ve been realizing that we need to change and adapt as we go because fundamentally we don’t know what we are doing. It’s research and development every step of the way. And if that’s the characteristics of processes, Agile being built on these pillars, I believe, then we have to turn our lens back on our software architecture and go “What the heck is that thing doing?” We’ve, unfortunately when you look at software architecture is still thinking that you can get it right the first time. Still believes that we are getting the right architecture and big decisions right the first time. And everyone is petrified about those big decisions because we know deep down it’s a lie. We’re lying to ourselves. We do this a lot in this industry. We’re lying to ourselves. We believe in the platonic perfection of architecture and design and it hurts us. So, what’s the alternative? 

Well, it turns out that if you look at things a little differently there is a perfectly good philosophical school we could have gone to. The stoics would have told us that we are insane. Ok? The best example of stoicism as I can quote it is Seneca’s statement that, and Seneca was a kind of a militant rather successful Roman stoic. He basically said “You do not know. The next day’s not promised to you.” Ok? No, hang on. “The next hour isn’t promised to you.” Fairly negative view on life on the surface. But in fact it’s real. Every moment of your life you are not promised the next one. Now, we know that we ignore it, we don’t like to consider it too much. Seneca would advise us to think about it a bit more. I think in software and in our architecture and design we should be really thinking about these things. We don’t know what’s going to happen next. We need to build our architecture and design that helps us change because we don’t know what’s going to happen. We need to stop building architecture that is fundamentally in conflict with reality. And instead build architecture that accepts that we don’t know. And there’s a lot we don’t know we don’t know. And it gets worse. Ok. So, let’s all become stoics in our software architecture.

This is why I call it the unreality of architecture and design because we spend most of our time ignoring the real consequences and the real possibilities with our software because we really don’t know what’s going to happen. I think I have a little bit of time to tell you a story about how this feels. So, who’s in a software development team? Ok. Cool. Who does daily stand-ups or something similar? Ok. Sweet. And who does iterations of, they vary in length? I imagine all people do some kind of iteration. Imagine this and I’m going to ask you to trust me. Do you trust me? You’ve just met me. Trust me? Ok, shut your eyes. Close your eyes. Just relax. Let the coffee work its way through your system. Ok. It’s sprint reiteration 10, to pick an arbitrary number. You just entered into your stand-up meeting and like just any sane human being you sat down. And you sit there and you’re feeling good, really good. You have, you are acing it. This is sprint 10 and that software is beautiful. The customer is happy, you’re happy, life is good, you can hear the birds in the trees. And they’re singing your tune. And then, and then fortune or Fortuna comes to bite you. What happens is, whoever the decision maker is, producter or whatever label you would like to give to that person, they come into the room and say the one phrase you have been dreading “I’d just like one small change.” At that moment, I’m going to take you on a little emotional journey now, at that moment the first reaction is anger. “How dare you? How dare, I’ll cancel the sprint. I’ll throw all my toys out the proverbial pram. Right now I hate you. How dare you tell me? We agreed, we agreed at the beginning of this sprint what we were going to do. How dare you change your mind?” That is swiftly followed by the next emotion which is guilt because deep down, really deep down you are supposed to be an Agile software developer. What does Agile mean? We embrace change. And so you know that you would like to accommodate this change and it’s worse than this, right? It’s worse because what’s happened I call the elephant in the stand-up. You’ve hit the situation where your architecture and design and all the code that you wrote yesterday which we colloquially call legacy is now in conflict with reality. And it’s not your fault because you’re not asked to think about how architecture needs to change. And that’s something we need to start doing. Ok, you can open your eyes now if you still have a shot.

Ok. The very last thing I’m going to talk about that is what happens next without a doubt. What happens next is we lie. Ok. We use a couple of terms. The first one is “Yeah, we need to, we need to do some refactoring. You’ve heard of refactoring, right? It’s a real term.  We need to do that for about a month. Are we ok, are we good? No, no, you’re going to get no new features. No, no, no. We need to do refactoring. It’s a real thing. You’ve heard of it. We’ve got to do it. Stop getting g in the way of the Agile process, man. We’re doing refactoring now.” Now, I’ve looked at refactoring and by definition is supposed to be one small change that doesn’t change the behavior of your system. If you need to do your month’s work of refactoring, you’re not refactoring. 

Ok. Let’s talk about what else you might use as an excuse. Let’s give you that, too. The next one is a beauty. Technical debt where we’ve achieved. You’ve heard of the term technical debt? We’ve done that. We are moving way to quick and it’s your fault. We build this stuff and now we have to redress the balance. We’re going to pay some back. Yes, a similar message and you’re not going to get anything for a month or so. And we’ve got to really prepay the system back. Once again we are cloaking the real problem which is that our software can’t keep up with the change that’s come in. I’m not saying that every change should be small and there are times when the product owner or someone like that will say “I want something small” and it’s not. But what you’re trying to avoid arte those situations where you have to lie, the urge to lie. When actually it’s not, it should really be a small change but it’s not. Ok. That’s the inhumanity that’s caused by architecture and design. 

Last of all. The very much last of all. The inhumanity of doctrine. Now  I realize I’m on dodgy ground now because I’m going to be starting to sacrifice some of the very, very things we hold dear. Not in a very bad way I hope. I have an issue with doctrine, I have an issue with manifestos. And we’ve got one and it’s a good one. But there’s a problem with manifestos very, very deep down in what they are. Ok. So, the problem I have with manifestos is that they ossify the opinions around a particular area. They immediately crystallize and make it hard to change something. So, my argument in this regard is that I believe that the Agile manifesto, the good thing that’s done, are wonderful. What we haven’t noticed is the bad thing that’s done because to a certain degree. That’s it, I‘m done? I’ve got to go? Sorry. The manifesto, the challenge with it is that it ossifies. If you ever go to Ireland, ossification means something completely different. I realized that terminology wise, ossification means drunk which actually still works. So, I think manifestos are ossifying so they either get you drunk or they stop you from ever challenging these things. So, that’s my argument really. I believe the danger of manifestos, and one of the reasons I really try not to write any or contribute to any or sign any is because I feel they immediately ossify and potentially can strain what can be done and invented upon. So, just something to put out there is that we really have won the better ones in this industry but I do think that we very carefully need to attack and move on from many of its thinking because there’s lots of innovation on top that we can apply.

Ok. So, my remember and apply section. I’m not sure how much time I have left but I’m quickly going to get through this and then I’m out. I’ve got zero. That’s a pretty solid zero. Ok. Very quickly. Introverts, watch out for them! They are out there. There’s lots of them. I am one. If you want to talk to me about what makes an introvert come and grab me, I’ll be in one of those booths hiding in a corner. That’s what we do. 

Understand and balance across your teams. Understand who you’ve got and what they do and how they operate. Everyone is so unique and different. Please, be human about it and look for those sorts of character traits. It will get a lot more out of your teams.

Embrace an individual’s journey, don’t just shoehorn everyone into teams if they, if you feel that’s just the way it should be done. Watch out for the introverts who would find that incredibly painful. And you’re just not getting their creativity because that’s not where it comes from. Most of all, be kind to people. And let’s make our processes and practices and architecture and design consider humans and change the reality a bit more.

Ok. Being scientific and open versus doctrine. Ok. Team building is not one, you should get to know your people. And thank you. 

 
