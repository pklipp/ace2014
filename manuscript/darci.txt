# Darci Ducher: Expertise is Not Enough

Darci Dutcher: Thank you for that introduction. I have to say I don’t know where Russ is in the room but I will comment that even as an extrovert, standing in front of 200 people, a little bit intimidating. So, bear with me. I’m used to doing this in quite smaller venues because user experience generally is kind of a side topic at Agile conferences, that at Agile conference you act a bit as a side topic. So, it’s quite exciting to be sort of in main stage today. 

So, what I’m going to do, is much like other speakers today, I’m going to make you stand up. If you think that you are good at your job, stand up. Ok, if you think you are good at any part of your job, stand up. Ok. Most people are standing. I’m a little bit worried about the ones who aren’t because hopefully there’s something at your job that you’re good at. We can address that after the session. The next question that I have for you “If you think that being an expert and having the knowledge that you have right now is enough to continue to be good at your job, stay standing.” Sorry, did I make that confusing? Ok. So, this is interesting. So, most people think that with the knowledge. The rest of you can sit down, sorry. This is interesting. So, most people, ups, most people in the room think that the knowledge that they have today and the expertise that they have is not enough to do their job well in the future. 

So, I’m going to confess something to you. I’m fairly good at my job. I’ve been doing it for a number of years and not I’m going to tell you for how many years I’ve been doing it but it’s a number of years that I’ve been doing my job. And I’m pretty good at it. I’ve designed airplane cockpits, I’ve designed healthcare software, I’ve designed software to run nuclear power plants. Designing life in that software, I’ve been there, done that. And I’m actually, as far as I know, no one had died because of something that I have built. So I’d like to think that I’m fairly good at my job. Then my confession is that is not enough. That’s not enough for me to actually go into my work every day and do what I do because what I’m, what I do is about the customers that we have at my company and making the world a better place for the people who use the software that I build, or that I design. And being an expert and the knowledge that I have right now and today is not enough for me to do that. And that’s what I’m going to talk about. 

Luckily for me some of the other speakers have brushed over, not brushed over, have mentioned some of these topics already. So it should be a bit of familiarity with some of what we’ve talked about. I’m pointing the wrong way because it’s backwards for me. 

So, just quick introduction on Darci. That’s my Twitter id. That looks like a sock, it was meant to look like California, which is where I’m from originally. The reason I mentioned that is because I get very excited about what I do and sharing knowledge with other people and trying to understand their experiences  so that I can improve what I do. Being from California I often I get quite excited and that means I talk really fast. So if am talking too fast, put two hands in the air and I’ll slow down for you. 

It’s the only slide that’s not hand drawn. You can tell I’m not actually a visual designer, I’m a user experienced designer. The one thing I’m not going to do, I’m not going to sell snake oil today. I am not going to give you a solution that suddenly makes your life better. I’m not going to tell you how to do anything differently. I’m going to offer you some options. I’m going to tell how changing my point of view and my mindset made my life at work better. So it’s not snake oil, it’s my personal story and my experiences. And hopefully someone in the audience will recognize something here and will be able to make their life and their work a little bit better because of my experiences. In other words, hopefully, you can avoid making the mistakes that I’ve made. 

The premise of what I’m going to talk about is experimentation and testing. That’s a little test tube in case you couldn’t tell from my drawings. It’s better than expertise on its own. The combination together is even better that being an expert by itself is not enough to be good at our jobs.  I’m going to talk a lot about user experience because that’s what I know. However, most of this applies to almost anything that we do. Simply being an expert is not enough if you can actually test it and experiment. So, some of this fits into what Marcin was saying earlier around ”Learning isn’t very useful until you put it into practice.” Being an expert isn’t very useful until you can prove it in an experiment or a test. Ah, too many. Ok. 

So, what do I mean by experimentation? So, my view as experienced user designer experimentation includes all of these different types of testing: A/B testing, interviewing customers, usability testing, formal usability testing, informal guerilla testing, unmoderated testing, testing paper prototypes, the Lean  concept of get out of the building. So it’s talking to people, it’s understanding what they need and what they do. The world that I designed software for 5 years ago isn’t the same world that I design for today. And if I stick with what I know, and stick to the same thing I’ve always tried and always done, I’m not going to be very good at my job and I’m not going to be able to address the needs of the customer who I build software for. 

So, I talk about all the testing. One of the things that we do at my company and I’ve done it at a couple of other companies, as well, is we’ve  implemented something called 5 on Friday which means that every Friday rain or shine, we have 5 customers come into our office to do some testing for us. We don’t always know what we are going to test. We don’t always have something to test, but we always have a valuable conversation with them. When they come in sometime we test live software. Sometimes we test our competitors’ software. Sometimes we test paper prototypes. Sometimes we put sketches in front of them that were drawn 5 minutes before they turned up in the office. And sometimes we sit down with them and we have a conversation to say what is it you need, what gap are we not filling right now. And all of that provides us with valuable information that we would have never gotten if we hadn’t talked to the people. And by making it a ritual, it’s an expected part of every week. Every Friday 5 people come in. It’s really started to become a part of the development cycle. So, the developers and the Q&A, the product owner and the business analyst look forward to having these sessions because they know they are going to learn something that it’s valuable to what we’re doing. Maybe it changes our road map. Maybe it just simply validates what we already have. Maybe it raises questions that we need to do further research into. But either way we end up with additional information that we didn’t have. Not everybody can do 5 on Friday testing. If it’s something that you can fit into your schedule, it’s a really valuable tool because it involves everyone on the team in that testing and it’s not just the users experience designer going off and coming back with “ I have done research and here is the answer.” That’s not very helpful to anyone else in the team. Most of the reason that I apply like Agile is that it’s about collaboration and it’s about the team together. And if I as a designer have to go off into a dark room or run away into a laboratory, and do some testing, and I come back, it’s a lonely experience for me and I don’t get to involve the rest of my team. 

So, you using approaches like guerilla testing or the 5 on Friday means you can involve the entire team. And hopefully since I’m guessing most of you aren’t designers, and that actually sounds like something you’d want to do, you’d want to see real people using the software that you built. So, often too easy to sit in a room with your computer, with your team and Agile and have stuff on the walls and it’s exciting and we forget the people who are actually at the other end of the system. And they have to use this and sometimes it’s a system that they want to use. Sometimes it’s a system that they have to use. And sometimes it’s a system that it’s  life or death, that causes a life or death situation for them if it has to do with healthcare, if it has to do with transportation, if it has to do with lots of things. So, actually sitting in a room and never seeing customers means that you are missing information that you could have and would make you better at your job because you could empathize with what these people do. 

I’m pointing in the right way? So, you can tell I’m not a visual designer. This is a hippopotamus. One of the reasons that I think this culture of experimentation is important is because it helps you fight the hippo. How many people have heard of hippo? Ok. Not very many. So, I’ll explain this to you because it’s easy. Hippo stands for highest paid person’s opinion. And often trying to fight a hippo, usually a stampeding hippo, isn’t really something you want to do. The same thing is true if you are in a meeting and the CEO says “I think it should be blue.” It’s an opinion, it’s coming from somebody who’s highly paid, well respected, but probably not qualified to be making that decision or that recommendation. So, using an experimentation culture give you, gives everyone method for fighting the hippo. We’re not even fighting the hippo. It’s more about befriending the hippo. 

So, I’ll tell you a story that happened to me a couple of weeks ago. Someone in our company, will call him Dave, totally not his real name, Dave came to me and said “Darci, I want to try this thing. I’ve seen it on a similar site to ours, it’s not our competitor. It’s sin omething that I think is really valuable. I want you to do this for me now.” I, my head I was thinking “Well, before I get a solid map for the next months, and we don’t have extra time to do this stuff, and actually this part of the website it already works really well. We tested it. It’s one of our highest converting products. Why do you want to change this?” And instead what I did in that moment as I swallowed thought and I said “That’s really interesting. Tell me more. Tell me what it is that you want to see and how you think this is going to benefit our customers and our company.” And I sat down with him and he’s not a designer and he knows he’s not a designer and he didn’t want to do the designs. He wanted to see someone in the company turn his idea into reality. And I sat down with him. I got the information from him and I took it away to my team. I have a team of 7 designers that I work with and we sat down and we worked out some ways to, some options of what we can do with this design and we made some changes to it but it was still fairly true to his original idea. And because we also have web developers on my team, I skimmed a little bit and snuck it in. It wasn’t really in the road map but, you know, it was kind of important to the company so we snuck it in. We got it done and we put it live for an A/B test and it doubled the conversion of that particular product. 

And I could have taken that as a bit of a problem, but it wasn’t my idea. As the sole user experienced  designer in my company I should be the one creating the wire frames, I should be the one deciding the use of journey. And instead I thought of it as a win-win situation. He got his idea live, we sold more of that particular product which is quite important to us because it’s one of our most popular. And I befriended the hippo. So, the next time when Dave, who’s really not a hippo, you know, it’s a good point. The next time Dave has an idea, he feels comfortable coming to me because he knows that I will support him when and how I can. It also means I don’t have the sole pressure of being the only person who can do this design or that can up with these ideas. So, I now have a source of 400 people in my company who can come up with ideas and we can test them, we can put them into place under certain restrictions. We still need to A/B test or validate the things that are going to break the site. But I have a wealth of information and ideas that I didn’t have before and it is because no one had actually tried to make friends with the hippo. They’d fought the hippo and you almost always lose when you fight with a hippo. As you can imagine. Although that one looks quite cute most of them don’t look quite so friendly. 

I won’t make you stand up for this one, I’ll just ask a question. How many people at work often feel pressure to always have the right answer? Ok, that’s actually pretty confronting. I’ve asked this question before and got a lot of people who said yes. One of the things about testing and experimentation is a means that I don’t have to be right all the time, I don’t have to have the one right answer. I can fail, I can be wrong, I can come in and say “Actually I don’t know what the right answer is.” But here’s some options. Lets’ try both of those and see what happens. So it takes a lot of the pressure off to be right all the time. And obviously, you know, most of us work in Agile environments and we believe in failing fast and learning from our mistakes. The reality that I’ve experienced though is a lot companies really struggle with that point especially if you’re working in something, in a situation where making a mistake can cause the company money. So, as much as everyone says ”Yes, yes. Fail fast. Learn from the mistakes.” It’s ok not to be right. For me taking an approach of experimentation more than expertise has taken the personal pressure out of me and I don’t feel I have to have the right answer on the tip of my tongue every time someone asks me a question. It gives me the opportunity to test things, to learn things, to try new things, and to sometimes actually say “I don’t know. Let’s try a few things and find what works best.” And for me personally as a bit of a perfectionist, that has massively improved my work situation and all I did was change my mind about how I did things and how I approached design. 

Has anyone ever heard of hero design? A few people. Ok. So, what hero design is, is something very common in the US design community. it’s one designer going into a dark room, running away, working their magic. No one knows what they do in that room, right? And they come out and they have the answer. And it’s like the Ten Commandments, you come off the mountain and they are inscribed in stone. And that’s what you are stuck with. And here in design often  is the idea of one person in isolation away from their team without all the information, without all the options that are available to them and without all the expertise and experience of the rest of the team. 

A culture of experimentation in testing means you don’t, you can get rid of the hero designer and you make design a team sport. When I sat down with Dave, the hippo, I wasn’t designing on my own, I was contributing my experience and so was he. And so were the members of the team. So what we were able to do rather than having the hero designer who runs out and says “I have the answer!” we work on the answer together. And for me, one of the reasons I really dislike hero design is to me it feels like going backwards into the Waterfall world. Someone goes off into a room with the requirements, they do their work and this is the answer and they throw it to the development team and they’re off to work on another project. They’re the superheroes. They try to solve all the problems. And that’s not very motivating for them, it’s not very motivating for the team they are working with. To be fair it’s fairly lonely existence for user experience designer to do that.

 If you think about user experience design most of it is about understanding people and trying to work with people and know how to make software better for them. So, being isolated from their teams is actually not very useful for them. It can cause real problems for the people, for the designers because they are then isolated and working in a vacuum and that goes against most of what Agile claims to be about. What I truly believe it is about. 

So, I recently found this quote. Look at that slide, the picture is a little bit blurry. Sorry. “Best practices are someone else’s solutions to their problems, not necessarily the right solution to ours.” That’s from the Poppendiecks and their Lean book.  So, the thing I like about this is often in user experience  design and many other fields that I’ve worked with , there’s considered the best practice that people should follow. The best practice is often someone else telling you how to do your job and what you should do. In my many years of working in software and working in design, I have never solved the same problem twice. It might be a similar problem. It might be designer log in. How complicated can log in be? It’s always a different audience, a different year which means there are different devices available, there are different expectations from our customers, the requirements for log in are different. Some log in can be new? Not super secure. Some logs in need to be secure because it’s sensitive data they’re protecting. I’ve never solved the same problem twice. 

So, this idea that there are best practices that we can rely on to give us the answer is troubling to me because that best practice is a solution to different problems form someone else. Maybe it gives a starting point, maybe it’s a useful place to begin from and then do testing on how does that apply to your own situation? But actually a best practice probably doesn’t get you the answer for your specific situation that you’re trying to solve. So, relying on best practices within design and other fields is quite dangerous. In a culture of experimentation and testing where everything you do is tested, everything you do is validated, or verified. You can actually start to learn what best practice is for your own situation and understand where that might change in the next situation that you find yourself in. 

So, we’re nearly done. I’m going to leave you today with 2 challenges. The first challenge is to adopt the phrase “Let’s try that.” rather than saying no when someone gives you a daft idea. Try it. Talk to them even if you don’t end up implementing it. Have the conversation with them because making someone in your company feel heard and feel valued will go a long way to making your life easier and making things easier for your team. So, adopt the phrase “Let’s try that.” and after you tried that, test it. Not just assume it’s right. Test it and compare it to what you already have so that you have learnt something new from that situation and possibly befriended while you’re at it. 

The second challenge: use your expertise but test and learn every single day. So, this is about not getting stuck in a rut, not relying on the information and knowledge that you currently have because that information and knowledge becomes outdated incredibly quickly in a fast moving world. So, test what you do whether it’s user experience, whether it’s process with your team, whether it’s a new architecture, whether it’s a new way of doing Q&A. It doesn’t matter what it is, try something new. 

And I have to say after spending a day and a half here at ACE! my brain is bursting with ideas for what to do. I’m not actually sure which one I want to try first and how I’m going to take this back to my team. I haven’t worked that out yet, but what I do know that I want to do is take these ideas that I’ve learnt and listening to Martin around “learning isn’t real until you put it into practice”. Take the things you’ve heard over the last couple of days. Test them and learn something from it.  And then share that with your team. I would believe that any team in this room where there are people here could benefit if the team made a mission to learn something new about their customers every single day. We can improve our software, we can improve our teams and by then, by doing all of those we can make our personal world better than it is today.

Thank you. That’s it. 

  
