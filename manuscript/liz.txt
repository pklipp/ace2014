# Liz Keogh: Keynote - Superheated Test Tubes and Anti-Bumping Granules

![Sketchnote](images/originals/liz.jpg)

Can you hear me? Fantastic. That’s a very generous introduction. Thank you, Paul. There’s a lovely story about a Chinese painter who’s asked to paint this beautiful picture by the emperor  and turns to the emperor and says “It will take me a year.“ and the emperor says “Ok.” And he comes back in a year’s time to see this painter in his little village and he says to this Chinese painter “I’ve come for my painting.” And the Chinese painter says “One moment.” He gets his ink, he mixes up his ink, sets up his easel and paints in just a few minutes this beautiful, perfect painting. And the emperor looks at it and says “That’s fantastic! But why did it take you a year? ” And so the painter goes to his cupboard and opens the cupboard and out fall all the scrolls he’s been practicing for in the previous year. 

So, this talk did indeed get put together on Saturday night and I was still working on it five minutes ago but it feels that it has been in my head for quite a long time. It’s been in my head for some months. So I’ve started…I had to do quite a lot of research for this, a lot of this stuff is actually reasonably new to me. So, what I want to introduce to you today is introduce you to a few bodies of knowledge that I think really important to know about or at least bear in mind when you go about your work. And it really is about change. I am getting used to the analogy of test tubes but this is really about why change is hard and when it gets easy. Ok? I know Gitte and Lilian are doing a talk called “Why change is hard” tomorrow. You’ll probably get some other different ideas. They are both going to be right. Ok. 

So, I have a little bit of a warning for you, guys. This talk contains some positive opinions about scaled Agile framework. Can I see the raised hands of who’s never heard of scaled Agile framework? A few of you. Ok. So those of you who have never heard of scaled Agile framework, it comes with this really unique culture associated with it. And that is if you go on Twitter and say anything positive about scaled Agile framework, somebody will come and stamp on you. Right? So you have to the thing where you say scaled is bad, refer to it safe. Ok? And once you’ve said that safe is bad, it’s ok to have a discussion about it. You have to say scaled is bad first or you‘ll get into trouble. I did. So what you have to do, every time you hear me say SAFe and it’s spelled like that, we are not talking about things being safe, we are talking about Scaled Agile Framework, so when you see it with capital SAF like that, we are going to boo. Ok? So, I want you to practice. When I say SAFe.

Audience: BOOOOOO!

Liz: Fantastic! Great. Now, having done that ritual, we might be able to behave a little bit more like adults and stop treating it like villain. I’ll be good. Ok.

So, what is a superheated test tube? So, a superheated test tube is what happens when you get something that’s very, very smooth, very smooth glass and if you heat it up with a Bunsen burner and the liquid inside gets hotter and hotter and hotter until it starts to boil. But then an interesting thing happens. The liquid is so homogenized and the glass tube is so smooth no bubbles form. And it gets hotter and hotter and hotter and still no bubbles are forming until the first bubble forms. And then all the bubble form at once and it goes bang out the top of the tube. And it can happen if you put a glass pipette into it or a sterile or something like that. It’s a really dangerous thing. Ok? That’s what a superheated test tube did. I tried to find you some photos of actual test tubes for this talk but all the photos I found were full of focal shots. So, you’ll have to excuse my bad art work. 

All right. Who’s familiar with the Cynefin framework? Who’s not familiar with the Cynefin framework? Never heard of it? Right. There’s a few of you. I am going to introduce it to you briefly. If anyone would like a more lengthy ten minutes introduction of what I am covering here I will be very happy to give that to you at some point later in the conference. So come and grab in the brake.  Cynefin is a way of thinking about different domains and different problems and how you approach situations within those domains. And they are not quadrates, there are actually more than four of them but I am only going to cover four in this talk. There’s simple problems that children can solve, extremely predictable. You can go “Oh, it’s one of those problems.” You categorize the problem.  So, your chain falls off your bicycle you go “Oh, Look, my chain fell off my bicycle!” And you put it on back again. And even children can solve them, right? There are complicated problems and they are frequently made up of different parts. And when you put the parts together you get a whole, and it’s also predictable and it can be understood but only by people with the right expertise. So, you can think of a watch. A watch is made of parts and put it back together again. A watch maker can reassemble a watch and it works as predicted if it doesn’t, it’s not a very good watch. A mechanic can fix your car. And you being experts if I say to you “Use the registration”, you probably know how to do that, right? It’s complicated. But it doesn’t have very many emergent discoveries associated with this. 

Over this side of the Cynefin framework we have uncertainty. In the complex debate we get emergent outcomes. So, my favorite little story about that is a company called Ludycol who were making an online game called Never Ending. Multiple players on one game inviting lots of people to come and play it and they wanted to boost the number of people playing it.  They thought “We should set up a site where people could share screen shots of our pretty game.” And that would get more people playing it. So they put up this screen shot sharing site and they found people were not just sharing screen shots of the game, they were also sharing family photos and holiday snaps and interesting things they pictured and found and that became Flickr, started as a multiplayer game and you could never have predicted that, I mean you could see how it happened in retrospect but you couldn’t possibly predict it. And then we have this loss situation of chaos, right? Chaos is accident in emergency, in your house burning down. Chaos is something that usually resolves itself very quickly and it doesn’t always resolve itself in your favor. In complexity we have to try something out, we have to experiment. But in chaos sometimes things aren’t safe to fail. I had a discussion with Ron Jefry on this on a blog post I was writing and he said ‘Is it wise to try something that it’s not safe to fail’. Well you know what? If your house is burning down you leave. And if you fail to leave, it’s going to burn down with you in it. And that’s not safe to fail but it doesn’t stop you from even trying. Right? So it may not always resolve itself in your favor. My favorite example I used for software, for this, is night training, release something to production that was duplicating their trades. And by the time they managed to work out which server was coming from, and shut it down they lost 30 billion dollars. It’s a lot of money. And you can bet some people where quite panicked at that point. So that’s chaos. Guess which one the exploding test tube falls into? Right. Chaos. We don’t like chaos. It’s very high uncertainty. We don’t like uncertainty anyway. It’s our human nature to try and stop patterns that predict what’s going to happen. And we feel uncomfortable when we can’t. And we especially feel uncomfortable when we can see it might not resolve itself in our favor, right? So we really want to stop chaos from happening a lot of the time. And what we do is we apply safety. We minimize the things that could go wrong. This is what safety is.

 I want to tell you a story about some people applying safety to something. I was on this project, really brilliant, highly innovative project, and these two junior devs went off for a couple of days to see if they could get fitness to work with what they were looking at. And they didn’t really tell to anyone. They didn’t think there was anything wrong with it. It was kind of related to the story they were meant to be working on. And there were so many people in that room that the standard got to a point where you only spoke if you had something to share with the team and they didn’t think it was important and they didn’t tell anyone in stand-up. And after a couple of days they said: ‘Yeah we can’t get fitness working.’ And somebody went ‘Is that what you’ve been doing for two days?’ And got very upset about this and put a rule into place. We were not longer allowed to work on anything without talking to a BA first. Of course BA’s were in meetings all day, so it’s really hard to get hold of them. Now I’ve been on that project for close on two years at that point. I kind of knew what I was doing, but even I was being told ‘Pick up a piece of work ‘. I can’t find the BE. I know I’ll just fix these bugs. I understand these bugs, I talked with the testers about them already. What am I, caused? I am just going to go and fix these. And before I do it the architect was over my shoulder ‘Did you talk to a BA before you did that work?” “No, look I can’t get hold of the BA, let me just do something useful and I’ll get feedback for them. Ok?” “No it’s not good enough.”

And overnight not only did the work slow down but every innovative thing that we’d ever seen happening on that project, every amazing ideas that people came up with that have made these project superb died because they only noticed the one thing that had gone wrong with a couple of people doing what they felt it was good and not the 50 things that have gone right previously. We are very, very good at spotting things that go wrong. Nietzsche says, I’m not going to read all these, he says ‘Any explanation is better than none’. So whenever something goes wrong we tend to try and do a bit of root cause analysis. And if we find an explanation we stamp on that explanation and we think we solve it. Usually there are several factors, an environmental cause to everything that happens within a system. So there’s usually several things that go wrong every time there is an accident. So, in a homogenized test tube the environment in which that liquid is boiling changes really, really hard. It’s hard to get those bubbles forming. It’s hard to make any changes the same way it was for me get any work done on that project right up until the point it explodes. Then it’s changing. Ok? So you can think of Cynefin framework in terms of this pyramid. And when you are looking at the complicated and the simple domains, the predictable ones. You can see there is a very rigid hierarchy in those domains. So, in the simple domain everything is connected in this hierarchy where people tell you what to do. In the complicated domain you have to get consensus from everybody to get anything done. Sorry, somebody can grab my boo sign? Don’t worry we will get to use it. Right. For complexity it really helps to connect the guys on the ground with workers, the people who actually know what the real problem is because they are the ones who experience détente the software developers usually caused it. Right? So we know what’s happening. But in chaos everybody acts as an individual. In chaos we look after ourselves first. Do you remember being on a plane and the mask falling from the ceiling and they always say “Put your own on before you help someone else.” Right? So, in chaos everybody is looking out for himself but it means we have got nothing to lose.  And we can actually come up with really novel ideas working on our own. 

So why is it that change become hard? Why don’t we have this really imaginative society? Why is it really difficult to get people to adopt Agile in the first place? The reason is this J-curve of learning. What happens is you start off good at something, relatively good and then you learn a different way of doing it. Now I used to be a flute player, I haven’t played for ages but when I was a kid I was a flute player and my first flute teacher got me some really bad habits, really bad. And that was fine for my grade 5 exam, I kind of got away with it in scrape 3. When I started getting up to grade 7, which is starting to approach professional level, suddenly my bad habits weren’t letting me progress, they weren’t letting me pass the exam. I found a different flute teacher who was prepared to help me undo those habits. And she took me right back to grade 2 and 3, stuff I’d be doing in junior school, right? She took me right to that level, to learn the right way of doing it, the better way of doing it. Now if you do that in an organization, and you’re teaching an organization a new way of learning something, the organization has a certain tolerance to change. If you overwhelm that threshold, if you go beneath that threshold for change, they will reject the change. You know what? That Agile thing it’s all very nice, now we can actually get some work done, and deliver some software because you know, the guys know what they were doing. And you said that would be something shipped within two weeks and you didn’t ship anything. You know. Never heard that? 

My friend, Mary Willeke, she has a thesis in adult learning and she‘s applying Agile techniques to university curriculum design of all things. It turns out they had a pattern that was a lot like Waterfall. And she’s been reducing the amount of time it takes to develop a curriculum from 9 months to three weeks. She says that people also have to change their identity in order to learn. So, I believe I’m a good flute player. I have to learn that I am not a good flute player, right? And that’s difficult. It changes the way we interact with people. You can imagine flute playing is something I do for fun, when it’s actually your work and you believe you are good at that work and now you have to learn a different way of doing it and a different way of interacting with the people around you. It’s quite tricky.Corporations have identities, too. What we frequently see is when you get a little Agile team kicked off, the organization will act to wipe that team out. And they may not even realize they are doing it.  They’ll do it in different ways. For instance, your team might be asked ‘’Can you do a presentation on how amazing that project was?’’ And you do the presentation and they are like ‘’That’s really nice. We’re glad it worked for you, but it’s not how we work. We are not going to do it again. ’’ Or they’ll take your team and say ‘’Ok, well. Obviously that was a very easy project. And you team was extremely successful because they’re all obviously really great devs. And that is why it worked.” So what we are going to do is we are going to take all the really great devs and put them all in different teams so they can pass their skills on to those teams. And of course it gets diluted and then it’s gone. So this is how organizational antibodies act to stamp out change, to stamp out things that don’t fit their identity. It’s like having bone marrow transplant. Right? You get injected with somebody else’s bone marrow cells. You have to keep taking anti rejection tablets or your body will reject it even though it’s a good thing for you.

However, when we are in chaos, our tolerance for change grows. We are ready to embrace change, we are ready to act. We just want somebody, some direction. And command and control in this situation actually works doing top down big bang approaches to change. Revolution can be the right thing. You want to throw some constraints around it and give something, give a framework in which people can act. So Alan Carter has this thing about packers and mappers, people who collect information and people who set patterns, but he does talk about how to traumatize a person. I thought it was particularly relevant for this talk. So this is how he describes how to traumatize a person. You nuke them. Twice. You take apart their rigid, industrial, feudalistic society, it’s very, very. This is Japan, right? It was very early industrial, just starting to lose their feudalism. You tell them an invader, America, is moving in and then you leave nothing to it. And in that situation a country like Japan is now ready for change. They want change. And they will take it even if it comes from the enemy. So into this walks W. Edwards Deming with his statistical process control, he was actually asked to go over and help out with the census because they were trying to do a census and couldn’t even make a phone call to Japan to get stuff sorted out. But the engineers took on his ideas and thought “This is fantastic! We really love this. We want to do this. ”And his ideas are fool and flat in America but in Japan they were embraced. From that we get our understanding of Lean and the Toyota way be it startup, be it product development. This has all come from small things like this in the right place. 

But evolution is painful. Have you seen a program of work where they fired the head of IT and got a new one in? And a quarter of the staff had been made redundant? That’s not good. It’s not what we want. It would be so nice if we could instead of having this exploding test tube have this gentle simmering bubbles of change instead. So how on earth do you get the gentle simmering bubbles of change? Well, I can tell you what it looks like. It looks like this. This is continuous improvement sometimes called Kaizen but we try to avoid the Japanese word. We have change, a tiny little change. And it is usually a change that comes from within the team so we are also giving them the habit of changing themselves which a really good thing and could be quite long lasting. And it's not going to spring the organizational threshold. It’s little change. And then another little change, you know. And we keep doing this until we reach this new level of effectiveness. If this was possible, why isn’t it happening more? Why isn’t it happening in those companies in particular which are in chaos? Those rigid, bureaucratic organizations that simply can’t deliver anymore and they are desperate to do something and they want change. They don’t want little change, they want big change. They need it now. 

Here is why it doesn’t work. You make a little change. That was good.  Improvement. But the next time you make a change is less effective and it’s less effective. And you’ve probably experienced this as devs. It doesn’t matter. How many hands up in the room? No devs? Not one developer? I know there’s a few of you. Hands up if you’re team leads, testers? One tester, I can see. Please don’t shoot me. Hands up coaches, process consultants. I want to come around and find out what the rest of you do. Ok. So, it gets harder and harder and then we suddenly find we’ve reached this plateau where we can’t improve anymore. And the point you’ve reached that plateau people start getting a bit demotivated as well because they really wanted to be better, they can see it could be better and they just can’t make it happen. There’s a gap.  There’s a gap and it’s really hard to cross that gap. And it happened because we have got this local automation going on which managed to improve our team that there is something outside our team that’s stopping us from changing and we haven’t got any influence over it. So, I am going to show some examples of those gaps. This is probably the most famous: “Crossing the Chasm”. This lovely curve is what you get when it’s a small change. You’ve got a product and you’re evolving it and getting out on the market slightly better and slightly better and slightly better and slightly better.  And that’s fine as long as it’s not disruptive. But if you have a disruptive product that’s going to change stuff there’s a chasm between these early adopters and the early majority. And it’s really hard to get across that chasm. What he says is “You have to build a momentum and build a momentum and build a momentum and build a momentum until it ticks. Sounds familiar. 

This is Bob Marshall’s “Rightshifting”. He says when we look at organizations which are effective, we like to think of it as a bell curve. If you know. Some guys here mediumly effective and some people who are really good like Google, some people who aren’t great. And he divided it into these four, these four types of organizations. Ad-hoc people who are just getting everything done. We   are not looking at how we are getting things done. We’re just kind of doing it. Analytic stuff, so tailorus thinking, scientific management. Synergistic, this is Agile, right? This is us. Kind of innovating a bit. And then you get chaotic. And he describes chaotic as ridding the knife edge where you’re just about to collapse into chaos but you don’t. So, companies like Valve. Valve have a lovely, lovely employee manual. And it’s got instructions for moving your desk, unplug your computer, leave your desk. You’re allowed to do whatever you want to at Valve. And you want to collapse into chaos but because of the structure of the community they have got in place, it never does.  And they can use some magic as a result. But he also notes that there are these gaps, these transition zones between these organizations. When you start improving, your improvements start high but then they drop until you get through the zone and then they drop until you get through the zone and then they drop and eventually you reach your maxim of effectiveness. So, your improvements are most effective after you’ve just made the transition into the next zone. Sorry. Wrong button. 

Richard Durnall talks about these patterns of Agile adoption. So, he says first of all the people break. People. I once went to an organization where there were these two coaches on their way out and I was on the way in to replace them and I said “How is it, guys?” and they said “Awful. It’s just awful”. I said “What’s wrong.” He said”They really don’t like it. They don’t like Agile at all. I had this one guy following me down the corridor going Agile’s fragile, Agile’s fragile, Agile’s fragile behind my back.”  Like  wow. That’s from somebody who’s a little bit scared, right? I found out who that guy was. By the time we had finished he actually came to the coach to coach this course. So, it took some time. 

The tools break. Most of the open source projects we’ve got have been created, things like Hudson, things like open libraries in Java and .net that I am used to using. They’ve all been create because our current tool just didn’t support the way we were working anymore. We virtualize stuff so we can get hold of test servers. 

The governance process breaks. I remember when I was on one project. We did all the really risky, new things upfront first so that we could upfront that risk. All the things that we were unsure whether it was going to work or not we tried out just to see if the project was actually on a sound basis. And our project manager was yelling at us “Why don’t the estimates have any correlation with the amount of time you are spending on these things?” And we were like “Because we’ve never done them before and when we told you we knew how long they were going to take, we were lying.” Right? “We were making it up because you told us you wanted a number.” If anybody does that to you, by the way, there’s a lovely site called estimategoat. com where you can rub the goat and it will give you a number. 

The customer breaks. I’ve always had the best way to get your stake holders involved. It’s the shit that something that’s wrong. And then I look at it and realize that I actually need to engage with you if they want to get it right. But they are not familiar with spending that much time working with the dev teams. They are used to doing a bit at the beginning when they a get a document together with the BA’s and then it gets handed to you and they never get to speak to you again. And now they have to sit in the room with you every day, frequently while they try to get their usual day job done as well. 

Then the financial controls break. How on earth do you budget for a project you don’t know what the scope is or you don’t know what the schedule is? Ahhh! 

And then the organizational structure breaks because if you are measuring  individuals with KPI’s and the testers being paid depending on how many bugs they find and then there’s bonuses and gaming going on. That won’t allow Agile to suffice and that breaks.

So what do you do if you are in this chaos? Dan North says if we ran chaos and everybody is trying to get stuff down and they’re pushing against each other. What you want to do is getting all aligned. And he said “ If that means top down teaching of all Scrum, you do it.” Right? When they’re all aligned, when they understand what the purpose is then you can get them to innovate. You can start allowing innovation to happen again. And it’ll be happening. It might change the direction of the company but it’s going to be roughly in the right direction.  Let’s talk about SAFe. 

Audience: Boooooo!

Liz: Right. Say, when I heard about SAFe.

Audience: Boooooo!

Liz: I thought it was that kind of thing. We’re throwing some constraints around the chaos to get everybody aligned. It looked a lot like Dan’s pattern. What I’ve realized is it’s not always sold that way. It is not suited for organizations which are already working. It really is heavy on the constraints. You do not want to apply it to organizations that are already shipping regularly. It’s really suited for those big, bureaucratic, rigid organizations which are in chaos because they can’t actually ship anything, but they don’t know what to do anymore because obviously that rigid isn’t working. So, they are looking for something to give them some guidance. And it’s also sad, you know. They have got half a constant sense of danger. So we are explicitly choosing it for organizations that are tipping from that rigid complicativeness and simplicity into chaos. So, why you might want to do that? This is the MIT Sloan review that they did. They were looking at different companies and how well aligned their software was and how effective the development teams were. So how much value adding work was going on compared to non-value adding work. And obviously where we want to be is up there, right? Highly effective teams doing really valuable work. This is IT-enabled growth. Yey! That is the number of people who were in that space. So it’s 7% of people in that space. It reduces your  IT spending by 6%. That has to be a good thing. And you get 35% compound annual growth rate on your 3-year sales. I don’t know what that means but it looks good, right? It’s definitely good. Yes! 

The place where we don’t want to be is down here, not very aligned, not very effective. 74% of respondents, not really spending any extra money on maintenance but their sales are dropping year on year. So what do you want to do? Do you want to go down the route of being able to have really effective devs who are delivering the wrong thing? Or do you want to deliver the right thing and  not worry too much about the engineering practice? Tom Gilb who’s talking tomorrow, I believe, has this thing called the matheo offer. Money or your life. You can choose one, but not the other, right? If you had to choose one, engineering practices or alignment, which would you choose? Well-oiled IT has 8% of people ahead, they’re reducing their cost by 15%, and they’re getting better sales because they are producing the same product they’ve always been doing but the quality of it is growing.  But when you actually look at the other corner we get a bit of a surprise. 11% of people are hacking stuff out that should be really valuable to them but it’s not very good quality, it’s not maintainable.  If you’ve heard the code of this liability this is the space in which they are talking about, right? You can’t maintain it. And the devs are getting tired and it’s getting slower and slower to produce anything. Your costs have gone up and your sales go down. I like to think that a little bit of that buys you a little bit of this, buy you a little bit of that, buys you a little bit of this. There might be some diagonal path to reach that.  But if you absolutely have to make a choice, learn how to build things right before you try to build the right thing. Get those engineering practices in place. Make the cost of change low. You cannot experiment when the cost of change is high and expensive because your experiments won’t be safe to fail. Let’s talk about SAFe.

Audience: Booooooooooooo!

Liz: I can hear these guys do it. Come on guys! Booooo! There we go!

Audience: Booooooooooooo!

Liz: Right. It’s important that I inoculate you against what you are going to discover on Twitter, right? Because this happens. SAFe stifles innovation. It is heavy on the constraints. It does ridiculous thing with story points and it basically says half a day for one person is one story point. And we are going to plan using that across multiple teams. And we going to make everything sized in those story points. That’s how we are going to get people aligned. That’s how we are going to get our dependency results. So it’s really heavy on the constraints. But you know what? It has the risk of actually shipping something. This is for companies that cannot ship. This is not for all companies, this is not for companies that are working, this is for companies that cannot get anything out the door. It’s better than Waterfall.

 So, where’s this heat coming from?  Where is this actual flame in our organization that’s causing this, this inability to actually get stuff done in the first place, that is causing the bubbles bust it’s also causing the heat of explosion? You can imagine a team that are trying to get stuff done, right? They want to deliver. They want to deliver. They want to deliver. And they can’t. They just can’t get anything done. It’s not because of internal stuff. They have influence over their own team, right? They can change locally. It’s because of another team. They are either devs can’t get a server of ops guys, the manger won’t let them. It’s friction between different groups of people that’s causing this. 

 	So what are anti-bumping granules? Well, in chemistry we put these jacket pieces of glass into the bottom of the test tube. And they act as nuclei for the bubbles to actually form. And then we get this gentle change, we get this bubbling. And we can see what’s happening and choose what we are going to do about it before it explodes. So how would we get that given that the heat is coming from these two different groups of people? How would you actually get that bubbling to occur rather than suddenly being a big explosion? Well, if the big heat is coming from friction between two groups of people then what we want is a little bubbling. It’s about individuals who have relationships between those two groups. They are our anti-bumping granules. Having just a little bit of connection between the devs and ops teams, one guy who’s gone for a drink with the ops guys and knows what they are suffering from and says “Hey, look, the reason we can’t get a server is because of this, is because we deploy some really shabby codes and we have to rewrite the scripts to reboot the server, you know.” Somebody who actually knows what the problem is. And then you get your bubbles. 

The innovation cycle talks about how we get to that point where we can start getting innovative stuff happening and getting that train. And if you remember the first mobile phones. Yeah? So the first mobile phones were very differentiating and K. Sarah put facing the user and we learned quite a lot from that. They learned that people actually want to take photos and the Nokia spoiled it. And now it’s commoditized. Everybody has got a camera on their phone, right? So, it’s become a thing that we understand really well. This is what happens. Differentiators become spoiled and then commoditized. And off the back of that we can build more innovative stuff like Google glass, like little games which actually overlay your environment and things like that, right? So we can start building off the back of it. But when you are in a situation when you cannot innovate, cannot innovate, cannot innovate, what you want to do is a shallow dive into chaos. You want to cause people to act as individuals or very small groups. You want to split them apart, you want to get a wide variety of ideas from as many people as possible. This why we do silo work in our retrospectives if you’ve ever done it with the post-it notes rather than just shouting thing out.  It’s because then it harvest all of our ideas rather than causing us to come to consensus. And when we’ve got a wide variety of ideas from that, we generate much better experiment to try out. And then we’ve got our differentiator back again. So what does this look like, when you actually do it with large groups of people?

 This guy Ronald Burt wrote about ‘’ Structural Holes’’ they stole almost, almost all of this from Jabe Bloom talk. He does a talk on social capital if you are interested in this I highly recommended going and look at it, it’s really good. And he says, within these groups that are very tightly connected you have homogenized opinions. They all got the same ideas. And you can imagine that in a large organization where everybody has to get consensus from everybody else to get everything done you have a large connected group. You actually need holes between the groups, we need very loose connections between the groups, not really tight once, because the best ideas will came from these groups when these groups with different opinion meet. And you don’t want them to meet for too long. So it’s not just about making connections is also about the quality about those connections and the rarity of those connections. 

This is something I like to do. When somebody invites me in to help them change, do something, you know get the guys preprogramming, whatever. I’m at the value streams and instantly I’ve got a lot of Russ’s comments. Map the values streams. So what I say is : ‘’ Ok, you know what the dev team writes, analyze and codes, test, whatever’’ that’s for local value stream, but where did the actual requirements come from, did they just come from the users. The users can tell the devs what they want and the devs just do it? Oh, no. There’s a PMO office and they sort out the bugs into batches of stuff that needs to be done and the architects work with them to do that. OK, so there is this big project that it’s been approved, there was the PMO office who decided that, just go ahead. Oh, no, before that there is like a board, and they do a feasibility study on which projects are feasible. OK, so where does the project come from? Oh, that comes from this company board, you know. And you actually find there’s a massive value chain, I find one place on an Agile project. There were 6 months of this going on before the dev even saw a sniff of the actual work. And this wasn’t high document analysis, this was just a very large organization. And then you go at the other end. Ok, when the devs are done and the teams done, can they cheat, can they just put it to the rush? Oh well no, because it’s an architect rewiever, the security  rewiever and the ops need to get hold of it and now decide when to deploy it. And it takes ages to get it to the users. What I ask people to do is. Can you put a dotted line around your sphere of influence and they can usually do that very easily what we’ve done it. We did it on whiteboards with actual realistic figures to remind them it’s all about human beings. And I put the dot around it, and I then I say ‘’Ok, where is your biggest constraint in this value stream, where is something that is slowing you down most? And it is almost always outside the sphere of influence, because if it was inside the sphere of influence, they would have fixed it instead of hiring me.  And I say ok, I can help you within your sphere of influence, because if I want to make a change and you think it is a good change you will help the devs to get it done, right, and you’ll support me in that. But all that will happen you will bump up against that other constraint. You are going to bump up against the ops team because they already have one release every 2 months. And it doesn’t matter how good you get you’re going to hit that. Go and make friends with the guy in that team who has got the constraint. Go talk to him, take him out for a pint. Let him know that if you are making changes that will make you more effective. And at some point it will start cascading on to him and find out what you can do about that together and if necessary escalade it, right? Go make a relationship, make good connection with that team. Find out if he’s already got a connection,  maybe there’s a dev who knows an ops person. This is devops, this is how devops starts. Devops is just when a dev and an ops person get together and have a pint and a bit of a chat about what they can do to help each other.

Here’s another model. On this ‘’Pareto Teams’’ Jabe Bloom’s talk again. I’ve stolen from that. What he does is they rotate 20% of team members around so they keep this core but the idea is always coming in fresh. Very loose connections. This is fortified, they have squads, squads are arranged into tribes, squads are each working on one thing and the tribes are working on related things. They have chapters which cross the tribes, but they are only ever done within the tribes. So things like the web devs will have a chapter, the testers will have a chapter. So although you have cross functional teams, you also have these communities and then they have guilds and the guilds cross the entire organization. And anyone who is interested, you know, people who want to become an Agile coach can join the Agile coaches guild. And these are supported by Spotify, this is really well supported. 

Let’s…. ‘’Convergence and Divergence ‘’ this is a really interesting one, Simon Cromarty wrote a whole blog post on this. And he says what they do is they explicitly choose whether to put people in teams or pull them out. So he uses the example where they are putting one HR person in each division, so this HR becomes familiar with how actually work interacts with the people on the ground. So they are diverging a chart and the same time the ops who have been sitting with the dev teams for ages, now the devs have a much better understanding and a much better relationship so they are putting ops central again. So the guys can work together and share it, they are making that very explicit choices. And said standardization in a way –point, it’s a journey and you keep doing this cycles.  Let’s talk about Safe

Audience: Booooooooooo!

Liz: I don’t need to hold up that sign any more. On the surface it looks a lot like what Spotify are doing, right? We have this Agile relieved trains which are programmed of related work that need to happen. I really love the analogy, we are getting on a train. We are all getting on a train together and every so often we are going to stop the train, we are going to dump off some luggage  we don’t want any more, we are going to bring on some new cargo and we are going to deliver the cargo we’ve got to where it need to be and it’s in the right place. It’s a really great analogy, I love it. It does evolve putting absolutely everybody in a room together for two days. And as a dev with very limited patience, I can stand that idea, but apparently even within that room they are working in very individual groups. And Martin Burns who’s in here and he’s the person who  taught me SAFe, he’s over there. He was watching us all trying to do our planning in two, just two small teams together, and quietly watching us failing and giggling at us, right? The idea is you do your plan as individuals, but if you do find dependencies the other teams  are in the room so you can talk to them. So that is that loose relationship and also remember that you’ve just shaken up an organization which have very strong role based communities anyway because they used to be a testers team, a dev team, a dev group, you know. So those relationships are already in place so I think that is a tacit community. I would love SAFe to have more explicitness about that, and then it would look lot more like Spotify and people would probable complain a lot less about Safe.

This is Chris Matts, another one of my favorite people. He has this thing called ‘’Distributed Consciousness’’. So Chris used to go to conferences and learn stuff and then he found out that it was way too much to learn. So what he did was, he’d go: ‘’ Oh Liz, which session are you going to? Oh, that’s great, that’s really good. And Mark which session are you going to? Oh, the same one as Liz. Look, Liz is going to that session why aren’t you going to this other session and you two tell me what you thought.  We meet back here and you tell me what you thought.” So he is short cutting going to all the sessions by getting us to learn for him. But then he thought that even was too much. So all he does now is get people to go to the different sessions, remember who‘s learning what and then when somebody needs that expertise he goes “Oh, yeah, I know a person you can talk to and connects them. And that’s what we call information broker. So he’s become an information broker but it has the effect of spreading his learning amongst multiple people so we say he’s managed to distribute his consciouness amongst the community now, as a result of it. He doesn’t actually do learning except through other people. It’s not quite true. 

My favorite, favorite example of Chris connecting people very quickly is when we were at Agile 2009. 44 floors of this skyscraper and the penthouse had a bar in it, so we met up in this penthouse bar and as I walked in Chris is there sitting in this big well of seats and he goes: ’’Oh, Liz have a beer’’ and hands me a beer "Thank you Chris" and immediately I could just dump my bags because I didn’t have to queue at the bar, wishing I could join that group over there, you know, feeling like an idiot and then sidling to see which conversation I could join. He immediately brings me into the group, and it was great for new comers, who are new to that environment, because large conferences like Agile can be quite intimidating, I found it. Even though I’ve been to a lot of them, I still find them quite intimidating. So it’s very welcoming and then the barman comes round and says "Chris can I get you a drink? And he’s"Yea, beer for anyone who needs it and two for me" And he gets his two bottles of beer and somebody walks in and he goes ’’Mark have a beer!’’ So immediately that person comes in. And I said to him ‘What happens if nobody comes in? and he goes ’’What do you think?’’ I like Chris. 

So I promised as part of this talk I would give you an idea about what your responsibility, what your power as an individual is to make a difference. This is one of my favorite scientific books ‘’Permutation City’’. It’s about people who are downloading their brains into computers, but the computers aren’t, you know, inner banks culture computers, they are really powerful computers but the human beings run slower in the computers than they do it in the real world and they are copying themselves, they not they not dumping their brains in so that they can make multiple copies if they want to. And there is one recluse and it’s a story within the story, this one recluse is rumored to have decided he wanted to speed his copies up so he asked a computer to optimize them for him. And the computer gives him back his copy and says "This is optimized." And he says "It is still not fast enough. Make it as fast as it can possibly be.""What is the end result of this program that is me, how fast can you reach this result for me" And the computer comes back with zero. He has no impact on the universe whatsoever. That’s what our power as individuals is. It’s nil. We have no power as individuals whatsoever. We make no difference to the world whatsoever until we connect with someone else by talking to them or through the artifacts we leave for them. Think of how many times we focus on individuals still, we put our names on the story card. We look at what a team is doing, we talk about helping a team to change and we are going to have a pilot team over here. What would happen if instead of measuring what people were up to, and visualizing that, we visualize how relationships were going? Where relationship were, where there were gaps we needed to bridge. What would that look like that if we started visualizing that and started working on that. We have no power as individuals, parallel connection is everything. Thank you very much.
