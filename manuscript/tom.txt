# Tom Gilb: Keynote - What is Wrong with Software Architecture?

![Sketchnote](images/originals/gilb.png)


Good morning! If you want a copy of the slides there they are. 

![slide 01](images/gilb/gilb01.png)

When we finally get synchronized with Dropbox there will be about 14 papers on Agile at that site which isn’t ready right yet. OK, so I’m going to talk about Agile methods but I’m going to talk about Agile methods that in fact our software engineering in the sense of using numbers and measurements and feedback. And I’m going to try and show that the best practices I recommend are proven by measure and quantified data.  And in my dreams all talks at conferences offer the same evidence for whatever they are proposing. That is facts that really work and how they work and what they cost.

![slide 02](images/gilb/gilb02.png)

I, I love very busy slides. Some people don’t. So if you don’t I have a suggestion close your eyes, relax, meditate, maybe a little listen, but I have to have the busy slides because they are reality, they are the detail, you can study them at your leisure they are freely downloadable. 

![slide 03](images/gilb/gilb03.png)

If you really don’t like busy slides and you just want an easy ride I recommend my TED talk where they forced me to get rid of all my busy slides whether I liked it or not.

![slide 04](images/gilb/gilb04.png)

I was a programmer for about 20 years and decided there was some higher calling, something let’s call it software engineering, requirements engineering, architecting, and I thought that was a challenge I would like to figure out how to do it and so the transition from being a programmer to being a, somebody who helps analyze and design that what programmers should do. Maybe some of you would like to make that transition after you programmed for about 20 years. How many people have programmed at least 20 years? Ok. Time left for the rest of you. Ok? 

![slide 05](images/gilb/gilb05.png)

This is an Agile so I’ll bring out my Agile credibility. You can call me Grandpa, I have white hair and I was fighting for these ideas since the 70’s actually when everybody thought I was absolutely crazy. And nice to know that the ideas that, iterations and feedback in particular are now widely adopted. 

![slide 06](images/gilb/gilb06.png)

Here are some of your heroes, although we don’t really need them. OK? But coming from specifically where they picked up their wonderful Agile ideas from. 

![slide 07](images/gilb/gilb07.png)

One of the things that worries me is that so many of you somehow had an education where in my view you haven’t been taught enough IT and software history. So I am going to do a little bit of that at the same time. Those who.., if we don’t learn from history the lessons we’ve learnt, the methods we’ve learnt, we will just reinvent the wheel, we will make the same mistakes, we will waste years of our lives. So part of my role is to be not only the grandpa but the historian. I remember I met the people who did it decades ago before some of you were born. 

![slide 08](images/gilb/gilb08.png)

So, just for fun I picked up this picture of me in an Indian guru costume and that’s my son Kay actually getting married but I am symbolically I am the guru teaching my son and I hope all of you will be my symbolic sons and allow me to teach you what I know and I don’t know enough, I hope you will teach me back what I don’t know because there’s this vast body of knowledge that I don’t know. 

![slide 09](images/gilb/gilb09.png)

Basic ideas of this talk. First managers are bad at, managers, booooo, right, are really bad at deciding your work environment. You should be the ones to decide it. IT architects 

Audience: Booooo!

Tom: are really bad at designing what you should program, you should be in charge of that, too. And so what I’m, what this talk is all about is delegating power to the grass roots who are much better at making good decisions about both their working environment and what they should be programming. Yes!!! Yey!!!!!!

Audience: Yey!!! 

Tom: Yey!!! 

![slide 10](images/gilb/gilb10.png)

Ok. So here is just, the talk I was originally going to hold, if you are missing that one about architecture, it’s on a video and basically I am telling 300 architects in London that they are childish idiots and quite an embarrassment to their profession. And I think they agree. Ok? 

![slide 11](images/gilb/gilb11.png)

How are we going to do this? Basic idea is we give some super ordinate objectives from our stakeholders and users to the programmers and they figure out smart designs and measure whether they are getting them. That’s for the design. For their own environment we give them information to the programmers about their bugs and problems, let them analyze root cause, let them figure out how to cure and let them implement measure when it’s done. So it’s quite simply clear delegation of power. 

![slide 12](images/gilb/gilb12.png)

Here if nothing else, I thought the picture is funny, enjoy it. In case you didn’t realize it, that’s you. Right? And the rest of them have other talents and traits.

![slide 13](images/gilb/gilb13.png)

I’m going to start off by giving you some case studies from Raytheon and IBM. The contrast here is from top down decision making management decides what your working environment is going to be and what I really would like is to get you in the loop deciding what your work environment should be and trying out your ideas and finding out whether your ideas are really what you want. Let’s see, push button. There we go. 

![slide 14](images/gilb/gilb14.png)

In 1970 and 1980 two people at IBM Michael Fagan and Ron Radice they invented something called "software inspection". And the intent was primarily to collect data on the working environment of the thousands of programmers of IBM and use these statistics to improve the environment. Long story short it didn’t work. I was there. I didn’t have any wiser ideas myself. I didn’t know why it didn’t work. It sounded like a good idea, get statistics, show what was frequently happening and fix the problem. 

![slide 15](images/gilb/gilb15.png)

Along came Robert Mays and Carol Jones in 1980 from IBM Research Triangle Park in North Carolina and they had a very simple idea. Delegate the power to the programmers themselves to analyze their own environment. Don’t let the managers do it. Don’t make it a statistical accumulation. Make it, you know, our work, bugs that we created, why did we do it? Were we sleepy? Was that the reason? Maybe the process changes to get more sleep before we get to work. That kind of thing and that worked. It worked so well that Robert got a citation from the chairman of IBM and $100000 prize just to indicate this was not a minor accomplishment it was impacting the whole IBM. 

![slide 16](images/gilb/gilb16.png)

Here’s a detailed case study which I dearly love. You can easily access the details from the links there. 

![slide 17](images/gilb/gilb17.png)

We’ll start off by, take a look at for 1000 programmers, take a look at what is called rework cost. Rework cost is the cost of fighting their own bugs and changing and retesting things. It is what normally is if you’re not measuring and try to fix it at about 43%. That means out of 1000 programmers 430 of them were tending the wounded from friendly fire. They were fixing bugs they themselves had created. That’s what I call a really stupid army. Unfortunately most of you are in that situation now but you don’t know because you are not measuring it. Try measuring the rework of what you do. Were pretty sloppy. Anyway, they learned from Phillip Crosby’s work on "Quality is free" that high rework is not a necessity or an act of nature. You can gradually improve your process so as to reduce it. In this case they reduced it by factor of 10. And they reduced it by a factor of about 2 within the first year. So in the first year they were actually saving about 150 programmers for productive work and then they improved the process, sometimes they failed to improve the process well and they keep on improving the process systematically use a thing called defect prevention process, DPP. That’s the invention of Mayze and Jones. 

![slide 18](images/gilb/gilb18.png)

Here are some other side effects. The productivity of the programmers went up by a factor of 2.7. This is on 26 projects. This is partly getting rid of the waste cause by fixing their own bugs partly by smarter ideas that helped make them work more productive. 

![slide 19](images/gilb/gilb19.png)

Here’s another one. They were actually quite good at running over any budget they had by only 40% but within 1 year, they managed to get to the stage they did not run over their budge ever for the next x years. Most of us, you know, run over budgets by about a factor of 3.14 every time. Ok? Even if we multiply the original estimated time with 3.14. We seem to do that. 

![slide 20](images/gilb/gilb20.png)

Here are some of the process improvements they made just to give you some sense of the detail. Interface problems, regression test repeatability, inconsistent system inspection process, inspection as eyeballing code or code review here. And bad requirements updates and more problems with requirements. These are the real examples of the changes they make to their system to increase their productivity and reduce their lack of productivity. 

![slide 21](images/gilb/gilb21.png)

The bug density went down by a factor of 3 which is nice, not exactly 0 defects. 

![slide 22](images/gilb/gilb22.png)

Interestingly they discovered that when they invested time in training people to do this and allowing them to do it. Because I know your first excuse is "This is very nice but we don’t have time." Ok? We’re so busy fighting the fires we don’t have time to avoid the fires. But they, they figured out that they were getting 770% return on investment from investing in this, ok? Now how much is your bank giving you right now, is it 2%? 3%? Ok? 
They used this argument for their chief financial officer to get even more money to do even more and to do it better. So you may not be interested in finance but you may be interest in financing your adventures into better technology and I think putting the argument about how…, what the payoff is will loosen the purse strings, that’s what happened in this case.

![slide 23](images/gilb/gilb23.png)

This is just a basic map of Defect Prevention Process. This is also identical with capability maturity model level 5 as it started out. I’ll give you another address for where is this capability maturity model. Let me check something. How many people here said "I knew about the Defect Prevention Process before you began your talk, Tom." Pretty good. About less than 10%. OK. How many of you have ever messed about with capability maturity model?  Ok. Another 10% and almost a different group. Thank you. Ok.

![slide 24](images/gilb/gilb24.png)

So what’s going on here is that the 1000 programmers who later got merged with another 1000 they are analyzing their own bugs and specification defects as we see in requirements. They’re suggesting their own work environment changes such as the ones I just showed you a slide full of and they’re reducing their 43% rework by 10 times. By the way over an 8 year period. Management would like to get it done this year. Reality is cultures change slowly but they do change if you measure and you persist. And so, and you get big changes in the first year down from 43 to 27% but you really have to have patient long term management thinking to get the full benefits of what is possible. The point is power has been delegated to the programmers and this works far better than anything else known then or now. Ok? 

![slide 25](images/gilb/gilb25.png)

Here’s one of my clients in London who looked at what Raytheon did and quite simply repeated it. They were just to a start up, just about to go out of business because they had so many bugs, nobody would buy them. They decided to copy the program and even had a 5-year time horizon reducing the bugs. They got so good at quality compared to their competitors that they took all the business going in their market from the competitors and won out. There’s a lovely case study "The Agent of Change" by Dick Holland showing how that worked with simply replicated what Raytheon had done.  


![slide 26](images/gilb/gilb26.png)

Here’s another example. This is from what is now Boeing but was then McDonnell-Douglas. We found that there was a tremendous problem. There were too many young people coming in, like 2000 in one year, new engineers and they frankly didn’t know what they were doing. They were creating errors and bugs all over the place. This is in aircraft engineering not in software. These principles apply to any form of engineering or planning. And this was quite simply delaying airplanes and threatening the company’s existence. We found that one simple drawing had 80 major defects per page. A major defect is violation of best practice or standard. We decided to measure this and set a standard. You had to have less than one major defect to get approved for handing out to anybody else. People started off at about 80 major defects and were told "Your work isn’t deliverable." So they got motivated, decided they wanted to feed their kids and keep their job so they started learning the practices that the wise old man of the company had long since decreed. And they got pretty good but they have, their learning rate is about 50% reduction per cycle of trying to get good. But within about 5 iterations, this is one particular person called Gary but we have hundreds of engineers going through this curve. And within about 5 iterations they managed to learn the good practices well enough to practice them in practice and they got their work released. And that was happening within weeks across thousands of engineers. There’s case studies on that available if anyone is interested, some of the remarks of how powerful it was. 


![slide 27](images/gilb/gilb27.png)

So, here’s a summary. It turns out that Mays and Jones’s method, defect prevention, prevention doesn’t mean we find a bug and fix it, it means the bug never happens. Ever. There’s nothing defined. That’s the best condition of all. And it turns out that within about a year 50% of the bugs that normally happen will not happen. And as you will improve your process and put in a lot of changes, you’ll move up towards NASA levels of, order of magnitude, 99% of all bugs that normally happen don’t happen at all. The ones that do happen can be caught early by inspections. This is the advantage of catching them and it’s ten times cheaper to repair because it’s early days and what you don’t catch early you’d catch by testing and what you don’t catch by testing are gift to the user, of course. 


![slide 28](images/gilb/gilb28.png)

And this gives a perspective of these different technologies working together over time. One thing that I’d like to highlight here is some experiences from IBM in various places. On the very first line there in a 30-month period there were 2162 changes made to the working environment of the programmers, suggested by them. In other words, there’s not one big idea or which is what mangers tend to focus on. The big idea from the consultancy. We should go Agile, or go Lean or whatever it is. Get level 5. It’s actually a whole lot of very small practical ideas about physical working environment, very largely noise, office space, when you can come in to work, support systems and ..So, the big idea is that the mini small ideas seem to add up to tremendous real improvement. And the big ideas from management tend to fall flat on their feet because people resist them. People don’t suggest ideas that they would resist. They suggest ideas they’d like to do, tools they’d like to have, working environments they’d like to have. So if one of management suggested change, there’s no automatic resistance. So these dumb managers suggested stuff and it isn’t relevant for us. If we suggested, we’re very likely to suggest stuff we want and will accept and the whole problem of change resistance is dramatically changed.

![slide 29](images/gilb/gilb29.png)

So, here’s a summary. Developers are better at managing their own work environment than managers are. Directors should *not* design the work environment. The developers should evolve the environment through their practical every day deep personal insights about why have I created a bug or a bad requirement or whatever I’ve done. And they should take responsibility for their own situation. 

![slide 30](images/gilb/gilb30.png)

So, we are going to turn our attention to a related subject which is delegating through the developers the actual detailed design. You are like delegating to them an architectural role. And the idea again is who decides design? 

![slide 31](images/gilb/gilb31.png)

Well the customers and users say I want this and I want that or often in fact although we may call it a requirement they’re really designing the system and telling us what to program. And salesman representing them may do the same thing, and architects by definition try to figure out what design we should use in program. 

![slide 32](images/gilb/gilb32.png)

The new idea is put the programmer in a loop, a tight loop, maybe a weekly loop or something like that. You might like to call it a sprint and allow them to make the design decisions, to program them, to test them and measure them to see if they are any good. Leave that whole decision making to them. Refuse to accept anything resembling a design from these people on the basis they are not qualified, they don’t have an overview, etc. They are just amateur designers. We’ve been allowing the amateur designers in for too long. This..You are capable of being professional designers. These people do need to give us signals, like "I want it to be more user friendly."  But how it’s going to be more users friendly is something we need to figure out, technically.

![slide 33](images/gilb/gilb33.png)

So, I’m going to give you a case study on that, this is my favorite client who’s done everything better than I could possible teach them. 

![slide 34](images/gilb/gilb34.png)

In Norway we met as a gang of about 13 developers and 3 testers, here is even Peter the founder of the company and Trond, our test manager who is our hero and people like that. The interesting thing about this team is, 5 years later the same team is still there. You know why? They love their working environment, because it has empowered them. And they know they are going any place else isn’t going to empower them so they just stay. Wouldn’t you like to have a working environment you just didn’t want to leave, it’s so nice. The working environment not the perks, the working environment itself but that’s what you are looking at it.

![slide 35](images/gilb/gilb35.png)

When we meet them they’d been 8 years in an international market with clients like this. 

![slide 36](images/gilb/gilb36.png)

They had 50% of the world market it which isn’t bad for a little Norwegian company from Oslo. But they took an advice to dump the 1500 requirements in a queue which were largely designs by the amateur users, dump them forever and they did and focus on some high level requirements set by the marketing director. We need to be more user friendly and things like that. Here is an example of one of them written in my planning language, "Planguage", which says ok you have subset for usability, productivity defined, time in minutes to set up a typical specified Market Research-report. The old release 65 minutes, we’d like at least to get down to 35 minutes, this is every user every day anything and in our dreams we’d like to get to 25 minutes, that would be fantastic. This is the requirement coming in from the outside but the programmer stare that and say "How are we going to design the system to get to 25 minutes?" is the question. And they make a decision to try to do it, program test it and see how it goes. Ok? 

![slide 37](images/gilb/gilb37.png)

This is just saying that they completely left the idea of the detail features and burn down stacks and users stories and all this kind of stuff and they decided to focus on the what I call the top ten most critical objectives at all times. Trond whipped up a little tool we’ve seen far more advanced versions of it than this, but this tool is a snapshot of week 9 out of 12 weeks. After 12 weeks, a quarter of the year, they released it to the world. But in the 9 intervening weeks, we call them value delivery cycles, something like a sprint, except sprints are not really focused on delivering value, they’re focused on delivering code. But we focus on delivering value. 

![slide 38](images/gilb/gilb38.png)

So here is the requirement we looked at where these are requirements, this is the one we looked at, currently 65 minutes and every one is a sequence here. We’re trying to move from here to there, we want to at least to get to the 35 minutes. We’d love to get to 25 minutes, so the and we have a 110 working hours with about 4 people working on this agenda for a quarter of the year. Ok? The team chose the beginning of step 9 to work on this one because nothing had been delivered and improved from the previous 8 weeks. That’s a similar problem here and here, they’ve been working on the things that have been numbers. These numbers there, one hundred means they’ve met their goal, 200 means they’ve done twice as good as the goal, 50% means they’re half way through the goal. So this gives the project team an agenda, basically the weakest links in the chain need to be worked on. This is protocol dynamic prioritization and the team is at liberty to prioritize whatever they want. Nobody is going to tell them what to do. Their only agenda is at the end of a quarter of a year to deliver this goal numbers within this timeframe. 

So, that’s the agenda, get to 25 minutes. They’ve decided to work on that that week. They have a stand up meeting and within a half an hour suggest about 12 different designs. One of them is market information recoding and the question we ask the very design is "Ok. You think that’s a great design. How many minutes of the 40 do we need to save do you think we’ll save?" And the estimate here is 20. And that was the best one. And they also felt it would take them their 4- working day cycle to do it so they didn’t have time for anything better. 20 minutes is just of course just 50% of the way towards their task. Ok? Go, go. And, so they coded and implemented that and Microsoft usability labs kindly decided they would for free measure all the usability measures and Microsoft usability labs overnight Thursday to Friday said "You’ve saved 48 minutes, which is 95% of the target. Congratulations the design was twice as good as you estimated." They then spent a weekend trying to get to at least a hundred and over the weekend one guy and not the whole team got to 20 minutes which 12,5% more than necessary. So this is sordid, no longer has priorities and weeks end they can do that or that or the third one. They’ve got three more weeks to play with. What they..by the way after 9 out of 12 weeks,  75% of the time they have achieved on the average 91,8% of all their value. In other words they are ahead of the curve. 

This is the new burn down cycle. It’s a value cycle. It’s a value to cost cycle. We have coded cycle which may or may not give you the value of what is worth. We are changing focus to numeric values as understood by our users and customers primarily. So, that they also for fun compute priorities where red means you ‘d better worry about it. Green means you’re cool don’t even think of using any effort on it. And yellow means your tolerable level you’ve got the minimum worst acceptable case but you’re still not green you’ve not reached your goal level. So, this is such a logical system that priority can be computed directly by the spread sheet. These are the 25 goals they’ve set for the 16 people and each one of these is a 4 person team approximately working in parallel for a 12-week cycle. And you can see from the cumulative numbers here that all the teams are largely up there at about 90% of achievement within 75% of the time in other words well ahead of the curve delivering good value for money and time. This is the weekly cycle and I’m not going through in detail we develop this part in very large use of the Evo method at Hewlett-Packard. We have a case study publish by Hewlett-Packard on that. They innovated a little bit what the chief technical officer Peter was going to do and what Trond was going to do was QA manager and one would have to study that in time. 

Of the 25 things they did set up to do on the first quarter, after by the way one day of training I should add, ok, not two days, you master these in one day apparently. These are some, these are the 5 of the 25 that have the both sensational change. For example the first one time for system to generate a survey these are gallop poll kind of things was 2 hours gotten down to 15 seconds. This is like a free release to the user. Imagine if you’re driving to work and it takes an hour and your drive back takes an hour every day and the new I-phone apps which is freely downloaded says you will totally use 15 seconds in transport every day. Be my guest! That’s what the user is forgiven of sensational results and they got about 25 good results. Ok. 

A good sign of a method is when the people doing and loved it and feel empowered and understand it. So, here’s Trond’s comments on the fact that they really liked it. They love to stand around the corridors say "We made this product great and therefore we are the essential element of this company". Ok. Not the directors, not the managers, we are wise enough to make quite sure that the developers got all the credit. This is, using their own survey tool, this is how dead pleased their customers were when they’re just about to get their second release. And this on the second quarter are some of the big numbers they achieved by turning to other things and keep on turning out quite sensational improvements by just shifting to things not yet done. So that makes the case for delegating the power to the programmers for finding the design. You will not see such numbers in any other context, I believe, please enlighten me  if I’m wrong and you‘ve got the numbers to prove it.

Now, the same team two years later did something, I think pretty interesting. They said this is really successful this idea of engineering towards multidimensional goals and empowering us to find things, works great. We have a problem, they have a problem before we’ve met them, not surprisingly 8 year old startup, hacking together code to get on the air and served the market. There was no grand plan of elegant architecture, so it’d be easy to maintain. Ok, the first thing we suggested is that they invested a little, one day a week in cleaning up the code, but that didn’t work very well. So, they themselves figured out something much smarter to reduce their technical debt. And what they did was, they made a list of the technical debt aspects in another words attributes to the system that was made more or less easy to change and test and debug the system which are here. They set numerical goals and then they gave themselves one week every month called the green week where they worked on their own programming environment. Again there are teams in their own environment, ok? And they, it’s exactly like the Raytheon in principle, but they are specifically given a week a month guaranteed every months or they will be nice to themselves, the programmers and developers. They decide what their agenda is they decide the design, they make it happen one way or the other and they measure whether they’re in fact reducing their technical debt as described by a set of things like that and a set of rules like that. I thought that was bloody brilliant. I wish I thought of it myself. I didn’t but at least I can tell you that my client figured that out. Devote time to instead of refactoring which only at best messes with the code, they’re messing with the whole system including testing of everything they do to maintain the system. So they’re engineering reduction of technical debt. And I don’t think you do that by just letting a programmer loose on the source code. Ok. So, maybe I’ve said that well enough? Let’s go and take a look at another historical great, something called the clean room method which was developed by Harlan Mills and IBM in the 70’s. How many people say "I know what the clean room method is?"

One, two, three over there with the speakers group, ha ha-ha. Ok, rest of you innocence, ok, Thomas. Let me introduce you to clean room, first we start with Harlan Mills, he’s got an interesting challenge, he’s for me like Leonardo DaVinci, of software engineering, the genius. And he was on IBM Federal Systems Division with all that rocket scientist quite literally, space military rockets. And IBM’s problem was that every time they won a bid they were the lowest bidder and every time they took that they lost money that is, they spent more money than the lowest bid. So they were just continually losing money on all of their contracts and they finally said "this has got to stop", either we find a way of earning money when we win the lowest bidder contract or we get out of the business. Harlan you have some time to figure out, this is the smarter way of treating the situation of, we just have to fix the income from the government and we don’t want to cheat to get the rest of the money we’d like to have. So he actually worked for ten years and reported in IBM system journal number 4 from 1980 quite extensively, that’s web available. 

Now, there are two case studies here, one is the lamps project in navy helicopter system and the other is the NASA shuttle ground software. But, now you see what is clearly an incremental system. They are shipping the system in 45 incremental deliveries. That means 2%, that means once a month every month for 4 years. This is clearly what we today call Agile. And they’re very certainly using numbers and engineering for qualities like availability. Very clearly as I will show you in a moment with Quinnan, designing and engineering on every cycle. But let’s focus on the bottom line here. Very few late or overrun means budget overrun, financially overrun. In other words if you overrun you lose money, if you don’t overrun you break even or earn money. In a very few such deliveries in that decade, and none at all in the past four years. They’re building some of the most complex high quality systems on earth, space and military, to the very highest quality levels and yet they are achieving that, on time, under budget and they are making money. This is perfect project management for software. This is something, everybody should learn the recipe and repeat it. This is Agile at its best. It’s Agile but it’s engineering, too. These are engineers they understand the quantification of qualities and management to them very well. They are not just hacking code. Ok?

Quinnan, colleague of Mills is the sort of architect designer. The point he’s making is, every cycle they analyze, how did this design work? Did it really give us the availability we thought? Did it cost too much? If negative feedback, find a smarter design. Engineers have a paradigm called design to cost, ok? So, they call this dynamic design to cost because they’re doing it every cycle and they try to figure out what is that can reduce the cost and the timing and still give the high quality. If necessary they experiment, measure and get it right early. That’s how they deliver on time, under budget at the highest cost levels. They learn to live within their budget, ok, there is no planning poker or any childish games like that here. They’re told what their budget is, they’re told what their deadline is, they walk in. They have to figure out technically how to get there and they have to do it evolutionarily in small steps. This is Agile as it should be, is what I’d call it. But anyway you can study Quinnan in detail on web available things. Ok?

Design is an iterative process not an upfront process. Again these are the programmers involve in the loop, you know, not the managers at IBM or the directors anything like it. They are estimating in the loop, not with planning poker to begin with, estimating based on knowledge, facts and measurements and then new hypothesis, new trail, see if we know what we’re doing this time around.

Here’s another client of ours, he e-mailed me in 2011 and he mentioned he intended a 3- day course at City Group in 2006, I didn’t remember but I thought it was nice to have a new book review. He said there is a book review on my blog website but at the end of the book review he said "By the way I didn’t just read Tom’s book. I’ve been living in it for several years." Ok? And then he told a story of what he’d done after he’d been in the course there. Basically he said our bank, you recognize City as being partly Polish related and I spent a week here in Poland teaching this gang the methods, I don’t know how well that stuck but we did try. And basically the problem was they were tracking an amazing amount of stuff and they were very proud how good they were at tacking everything happening with software. But they were not tracking value delivered to stake holders. They were tracking functionality programmed and bugs and time, ok. So they are in a sense they’re tracking the wrong things but they weren’t even aware of it. They had the illusion that they were controlling risk but they were just controlling programming not the risk of failure to delivery, to deliver what the bank actually require. So, instead of using our Evo method which is the Agile method that does it with engineering, the Agile method that quantifies values, an Agile method quite identical to clean room and quite identical to Lean startup in principle, ok, measurement multidimensional stuff in cycles. Because he has low profile, don’t run if somebody uses this radical method you never heard of, just do it and if it works you will be forgiven, is another change tactic here. What he mentions here is that we talk very carefully, many of those things called requirements, that you are required to program are not really requirements they are largely design and the programmers should be figuring out the design, not the users. Users just stay at a higher level, I want to save time doing that task, they shouldn’t be designing the screen and the graphically user in the face, all that stuff. So, basically he took that lesson of separating what users wanted, the achievements they wanted and let the design himself be part of his team. So interesting enough the requirements remained unchanged for the 14 months of the project. Everybody knows the requirements turn 40% of the year, ok, but this is design turn. Indeed. They had plenty of design turn cause they plugged in design that they thought will work, but the designs didn’t work so they had to find some new ones. They were in the exactly same mode like in clean room. Ok . And a bottom line is successfully live, 800 users worldwide, undoubtedly some in Poland here, and big success by sponsoring stakeholders. Ok.

In fact the same, Richard Smith is going to present a small conference, private conference I’ll hold in London next week, he’s experienced with Japanese banks. I just got his slides last night, he is still doing them. 

Is it hard to change? Sure, it’s incredibly hard to change. Especially if managers try to buy top down command and control. It is, according to my evidence it’s much easier to change if you delegate the change process to the people who know what’s going on and have the power to make a difference and those are called developers.  Wow, I’ve actually time left.

Just for fun, last night, I have a hobby, is whenever I do anything I like to find the 10 principles and summarize it. So, just for fun in the work environment we need to delegate to the doers, that’s you, we need to measure the improvements, we need to let the troops, that’s you, identify the common cause defects, the things that are wrong and create many bugs and problems, we need to let you suggest what is the root cause, like I didn’t get enough sleep, and we need to let you try out, ok, come to work when you slept enough. Ok, whatever it is. 

In the product development area the troops, as in confirmed, to choose the value goal to work on, in other words which one of these goals will work on, that’s a choice. They need to estimate the power of their ideas, not throwing ideas let’s throw an idea and say “Let’s program and see what happens”, but estimate in advance it will save 20 minutes. We need to let them decide which of many designs they choose to implement as a team internally and not let any manager or customer interfere with that decision making process. We need to let them measure the results this week now and total to date so they know where they are and getting towards the goal levels. And we need to credit them for the results and reword them for their success. My suggestion was always if they were done in 9 weeks all the goal levels shouldn’t they have 3-week holiday, that’s been turned down time and time again. The nearest we ever got to reward like that is that they had 3 weeks to do training of their choice at any conference in the world. That they thought they could get away with. They said we can’t give them vacation. Everybody else in the company would be so jealous it wouldn’t work. Ok, nice idea. Ok.

So, the revolution has been here for decades but maybe you didn’t learn about it but I’ve tried to inform you the best I could, give you a lot of stuff to follow up so you know. Was it Karl Marx’ "workers of the world unite" something like that. You guys remember that stuff, anyway. Programmers of the world unite. Finally if you really want to read a tough book with the deepest wisdom I’ve managed to collect in about 40 years I’ll give you a free digital copy if you send me an e-mail. If you don’t want to read anything heavy I’ve tried to put some lighter reading, 14 papers on Agile including many things I’ve been talking about at this address although we are still struggling with the Internet trying to get it in there so it may be a while but sometime today that address will be valid, with the first person who finds stuff there check it out let me know. Copy of the slides are there and copy of my papers.

And a small miracle has happened. I’m done. Thank  you.                                                                                                                                                                         

